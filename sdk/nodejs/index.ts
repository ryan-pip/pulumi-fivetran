// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { FivetranConnectorArgs, FivetranConnectorState } from "./fivetranConnector";
export type FivetranConnector = import("./fivetranConnector").FivetranConnector;
export const FivetranConnector: typeof import("./fivetranConnector").FivetranConnector = null as any;
utilities.lazyLoad(exports, ["FivetranConnector"], () => require("./fivetranConnector"));

export { FivetranConnectorDbtProjectArgs, FivetranConnectorDbtProjectState } from "./fivetranConnectorDbtProject";
export type FivetranConnectorDbtProject = import("./fivetranConnectorDbtProject").FivetranConnectorDbtProject;
export const FivetranConnectorDbtProject: typeof import("./fivetranConnectorDbtProject").FivetranConnectorDbtProject = null as any;
utilities.lazyLoad(exports, ["FivetranConnectorDbtProject"], () => require("./fivetranConnectorDbtProject"));

export { FivetranConnectorDbtTransformationArgs, FivetranConnectorDbtTransformationState } from "./fivetranConnectorDbtTransformation";
export type FivetranConnectorDbtTransformation = import("./fivetranConnectorDbtTransformation").FivetranConnectorDbtTransformation;
export const FivetranConnectorDbtTransformation: typeof import("./fivetranConnectorDbtTransformation").FivetranConnectorDbtTransformation = null as any;
utilities.lazyLoad(exports, ["FivetranConnectorDbtTransformation"], () => require("./fivetranConnectorDbtTransformation"));

export { FivetranConnectorDestinationArgs, FivetranConnectorDestinationState } from "./fivetranConnectorDestination";
export type FivetranConnectorDestination = import("./fivetranConnectorDestination").FivetranConnectorDestination;
export const FivetranConnectorDestination: typeof import("./fivetranConnectorDestination").FivetranConnectorDestination = null as any;
utilities.lazyLoad(exports, ["FivetranConnectorDestination"], () => require("./fivetranConnectorDestination"));

export { FivetranConnectorGroupArgs, FivetranConnectorGroupState } from "./fivetranConnectorGroup";
export type FivetranConnectorGroup = import("./fivetranConnectorGroup").FivetranConnectorGroup;
export const FivetranConnectorGroup: typeof import("./fivetranConnectorGroup").FivetranConnectorGroup = null as any;
utilities.lazyLoad(exports, ["FivetranConnectorGroup"], () => require("./fivetranConnectorGroup"));

export { FivetranConnectorGroupUsersArgs, FivetranConnectorGroupUsersState } from "./fivetranConnectorGroupUsers";
export type FivetranConnectorGroupUsers = import("./fivetranConnectorGroupUsers").FivetranConnectorGroupUsers;
export const FivetranConnectorGroupUsers: typeof import("./fivetranConnectorGroupUsers").FivetranConnectorGroupUsers = null as any;
utilities.lazyLoad(exports, ["FivetranConnectorGroupUsers"], () => require("./fivetranConnectorGroupUsers"));

export { FivetranConnectorScheduleArgs, FivetranConnectorScheduleState } from "./fivetranConnectorSchedule";
export type FivetranConnectorSchedule = import("./fivetranConnectorSchedule").FivetranConnectorSchedule;
export const FivetranConnectorSchedule: typeof import("./fivetranConnectorSchedule").FivetranConnectorSchedule = null as any;
utilities.lazyLoad(exports, ["FivetranConnectorSchedule"], () => require("./fivetranConnectorSchedule"));

export { FivetranConnectorSchemaConfigArgs, FivetranConnectorSchemaConfigState } from "./fivetranConnectorSchemaConfig";
export type FivetranConnectorSchemaConfig = import("./fivetranConnectorSchemaConfig").FivetranConnectorSchemaConfig;
export const FivetranConnectorSchemaConfig: typeof import("./fivetranConnectorSchemaConfig").FivetranConnectorSchemaConfig = null as any;
utilities.lazyLoad(exports, ["FivetranConnectorSchemaConfig"], () => require("./fivetranConnectorSchemaConfig"));

export { FivetranConnectorUserArgs, FivetranConnectorUserState } from "./fivetranConnectorUser";
export type FivetranConnectorUser = import("./fivetranConnectorUser").FivetranConnectorUser;
export const FivetranConnectorUser: typeof import("./fivetranConnectorUser").FivetranConnectorUser = null as any;
utilities.lazyLoad(exports, ["FivetranConnectorUser"], () => require("./fivetranConnectorUser"));

export { FivetranConnectorWebhookArgs, FivetranConnectorWebhookState } from "./fivetranConnectorWebhook";
export type FivetranConnectorWebhook = import("./fivetranConnectorWebhook").FivetranConnectorWebhook;
export const FivetranConnectorWebhook: typeof import("./fivetranConnectorWebhook").FivetranConnectorWebhook = null as any;
utilities.lazyLoad(exports, ["FivetranConnectorWebhook"], () => require("./fivetranConnectorWebhook"));

export { GetConnectorArgs, GetConnectorResult, GetConnectorOutputArgs } from "./getConnector";
export const getConnector: typeof import("./getConnector").getConnector = null as any;
export const getConnectorOutput: typeof import("./getConnector").getConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getConnector","getConnectorOutput"], () => require("./getConnector"));

export { GetConnectorsMetadataArgs, GetConnectorsMetadataResult, GetConnectorsMetadataOutputArgs } from "./getConnectorsMetadata";
export const getConnectorsMetadata: typeof import("./getConnectorsMetadata").getConnectorsMetadata = null as any;
export const getConnectorsMetadataOutput: typeof import("./getConnectorsMetadata").getConnectorsMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorsMetadata","getConnectorsMetadataOutput"], () => require("./getConnectorsMetadata"));

export { GetDbtModelsArgs, GetDbtModelsResult, GetDbtModelsOutputArgs } from "./getDbtModels";
export const getDbtModels: typeof import("./getDbtModels").getDbtModels = null as any;
export const getDbtModelsOutput: typeof import("./getDbtModels").getDbtModelsOutput = null as any;
utilities.lazyLoad(exports, ["getDbtModels","getDbtModelsOutput"], () => require("./getDbtModels"));

export { GetDbtProjectArgs, GetDbtProjectResult, GetDbtProjectOutputArgs } from "./getDbtProject";
export const getDbtProject: typeof import("./getDbtProject").getDbtProject = null as any;
export const getDbtProjectOutput: typeof import("./getDbtProject").getDbtProjectOutput = null as any;
utilities.lazyLoad(exports, ["getDbtProject","getDbtProjectOutput"], () => require("./getDbtProject"));

export { GetDbtProjectsArgs, GetDbtProjectsResult, GetDbtProjectsOutputArgs } from "./getDbtProjects";
export const getDbtProjects: typeof import("./getDbtProjects").getDbtProjects = null as any;
export const getDbtProjectsOutput: typeof import("./getDbtProjects").getDbtProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDbtProjects","getDbtProjectsOutput"], () => require("./getDbtProjects"));

export { GetDbtTransformationArgs, GetDbtTransformationResult, GetDbtTransformationOutputArgs } from "./getDbtTransformation";
export const getDbtTransformation: typeof import("./getDbtTransformation").getDbtTransformation = null as any;
export const getDbtTransformationOutput: typeof import("./getDbtTransformation").getDbtTransformationOutput = null as any;
utilities.lazyLoad(exports, ["getDbtTransformation","getDbtTransformationOutput"], () => require("./getDbtTransformation"));

export { GetDestinationArgs, GetDestinationResult, GetDestinationOutputArgs } from "./getDestination";
export const getDestination: typeof import("./getDestination").getDestination = null as any;
export const getDestinationOutput: typeof import("./getDestination").getDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getDestination","getDestinationOutput"], () => require("./getDestination"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupConnectorsArgs, GetGroupConnectorsResult, GetGroupConnectorsOutputArgs } from "./getGroupConnectors";
export const getGroupConnectors: typeof import("./getGroupConnectors").getGroupConnectors = null as any;
export const getGroupConnectorsOutput: typeof import("./getGroupConnectors").getGroupConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getGroupConnectors","getGroupConnectorsOutput"], () => require("./getGroupConnectors"));

export { GetGroupUsersArgs, GetGroupUsersResult, GetGroupUsersOutputArgs } from "./getGroupUsers";
export const getGroupUsers: typeof import("./getGroupUsers").getGroupUsers = null as any;
export const getGroupUsersOutput: typeof import("./getGroupUsers").getGroupUsersOutput = null as any;
utilities.lazyLoad(exports, ["getGroupUsers","getGroupUsersOutput"], () => require("./getGroupUsers"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetWebhookArgs, GetWebhookResult, GetWebhookOutputArgs } from "./getWebhook";
export const getWebhook: typeof import("./getWebhook").getWebhook = null as any;
export const getWebhookOutput: typeof import("./getWebhook").getWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getWebhook","getWebhookOutput"], () => require("./getWebhook"));

export { GetWebhooksArgs, GetWebhooksResult, GetWebhooksOutputArgs } from "./getWebhooks";
export const getWebhooks: typeof import("./getWebhooks").getWebhooks = null as any;
export const getWebhooksOutput: typeof import("./getWebhooks").getWebhooksOutput = null as any;
utilities.lazyLoad(exports, ["getWebhooks","getWebhooksOutput"], () => require("./getWebhooks"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fivetran:index/fivetranConnector:FivetranConnector":
                return new FivetranConnector(name, <any>undefined, { urn })
            case "fivetran:index/fivetranConnectorDbtProject:FivetranConnectorDbtProject":
                return new FivetranConnectorDbtProject(name, <any>undefined, { urn })
            case "fivetran:index/fivetranConnectorDbtTransformation:FivetranConnectorDbtTransformation":
                return new FivetranConnectorDbtTransformation(name, <any>undefined, { urn })
            case "fivetran:index/fivetranConnectorDestination:FivetranConnectorDestination":
                return new FivetranConnectorDestination(name, <any>undefined, { urn })
            case "fivetran:index/fivetranConnectorGroup:FivetranConnectorGroup":
                return new FivetranConnectorGroup(name, <any>undefined, { urn })
            case "fivetran:index/fivetranConnectorGroupUsers:FivetranConnectorGroupUsers":
                return new FivetranConnectorGroupUsers(name, <any>undefined, { urn })
            case "fivetran:index/fivetranConnectorSchedule:FivetranConnectorSchedule":
                return new FivetranConnectorSchedule(name, <any>undefined, { urn })
            case "fivetran:index/fivetranConnectorSchemaConfig:FivetranConnectorSchemaConfig":
                return new FivetranConnectorSchemaConfig(name, <any>undefined, { urn })
            case "fivetran:index/fivetranConnectorUser:FivetranConnectorUser":
                return new FivetranConnectorUser(name, <any>undefined, { urn })
            case "fivetran:index/fivetranConnectorWebhook:FivetranConnectorWebhook":
                return new FivetranConnectorWebhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fivetran", "index/fivetranConnector", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/fivetranConnectorDbtProject", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/fivetranConnectorDbtTransformation", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/fivetranConnectorDestination", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/fivetranConnectorGroup", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/fivetranConnectorGroupUsers", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/fivetranConnectorSchedule", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/fivetranConnectorSchemaConfig", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/fivetranConnectorUser", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/fivetranConnectorWebhook", _module)
pulumi.runtime.registerResourcePackage("fivetran", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fivetran") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
