// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## ---
 *
 * page_title: "Resource: fivetran.FivetranConnectorSchemaConfig"
 * ---
 *
 * # Resource: fivetran.FivetranConnectorSchemaConfig
 *
 * This resource allows you to manage the Standard Configuration settings of a connector:
 *  - Define the schema change handling settings
 *  - Enable and disable schemas, tables, and columns
 *
 * The resource is in **ALPHA** state. The resource schema and behavior are subject to change without prior notice.
 *
 * Known issues:
 *  - Definition of `syncMode` for table causes infinite drifting changes in plan
 *
 * ## Usage guide
 *
 * Note that all configuration settings are aligned to the `schemaChangeHandling` settings,  except the settings explicitly specified in `schema`.
 * In `schema`, you only override the default settings defined by the chosen `schemaChangeHandling` option. The default value for the `enabled` attribute is `true` so it can be omitted when you want to enable schemas, tables, or columns.
 * The allowed `schemaChangeHandling` options are as follows:
 * - `ALLOW_ALL`- all schemas, tables and columns are ENABLED by default. You only need  to explicitly specify DISABLED items or hashed tables
 * - `BLOCK_ALL` - all schemas, tables and columns are DISABLED by default, the configuration only specifies ENABLED items
 * - `ALLOW_COLUMNS` - all schemas and tables are DISABLED by default, but all columns are ENABLED by default, the configuration specifies ENABLED schemas and tables, and DISABLED columns
 *
 * Note that system-enabled tables and columns (such as primary and foreign key columns, and [system tables and columns](https://fivetran.com/docs/getting-started/system-columns-and-tables)) are synced regardless of the `schemaChangeHandling` settings and configuration. You can only disable non-locked columns in the system-enabled tables. If the configuration specifies any system tables or locked system table columns as disabled ( `enabled = "false"`), the provider just ignores these statements.
 *
 * ## Usage examples
 *
 * ## Import
 *
 * 1. To import an existing `fivetran_connector_schema_config` resource into your Terraform state, you need to get **Fivetran Connector ID** on the **Setup** tab of the connector page in your Fivetran dashboard. 2. Retrieve all connectors in a particular group using the [fivetran_group_connectors data source](/docs/data-sources/group_connectors). To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups). 3. Define an empty resource in your `.tf` configurationhcl resource "fivetran_connector_schema_config" "my_imported_connector_schema_config" { }
 *
 * ```sh
 *  $ pulumi import fivetran:index/fivetranConnectorSchemaConfig:FivetranConnectorSchemaConfig
 *
 * Run the `terraform import` command
 * ```
 *
 * ```sh
 *  $ pulumi import fivetran:index/fivetranConnectorSchemaConfig:FivetranConnectorSchemaConfig my_imported_connector_schema_config {your Fivetran Connector ID}
 * ```
 *
 * 5.  
 *
 * Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_connector_schema_config.my_imported_connector_schema_config' 6. Copy the values and paste them to your `.tf` configuration.
 */
export class FivetranConnectorSchemaConfig extends pulumi.CustomResource {
    /**
     * Get an existing FivetranConnectorSchemaConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FivetranConnectorSchemaConfigState, opts?: pulumi.CustomResourceOptions): FivetranConnectorSchemaConfig {
        return new FivetranConnectorSchemaConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fivetran:index/fivetranConnectorSchemaConfig:FivetranConnectorSchemaConfig';

    /**
     * Returns true if the given object is an instance of FivetranConnectorSchemaConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FivetranConnectorSchemaConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FivetranConnectorSchemaConfig.__pulumiType;
    }

    /**
     * The unique identifier for the connector within the Fivetran system.
     */
    public readonly connectorId!: pulumi.Output<string>;
    public readonly schemaChangeHandling!: pulumi.Output<string>;
    public readonly schemas!: pulumi.Output<outputs.FivetranConnectorSchemaConfigSchema[] | undefined>;

    /**
     * Create a FivetranConnectorSchemaConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FivetranConnectorSchemaConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FivetranConnectorSchemaConfigArgs | FivetranConnectorSchemaConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FivetranConnectorSchemaConfigState | undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["schemaChangeHandling"] = state ? state.schemaChangeHandling : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
        } else {
            const args = argsOrState as FivetranConnectorSchemaConfigArgs | undefined;
            if ((!args || args.connectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorId'");
            }
            if ((!args || args.schemaChangeHandling === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaChangeHandling'");
            }
            resourceInputs["connectorId"] = args ? args.connectorId : undefined;
            resourceInputs["schemaChangeHandling"] = args ? args.schemaChangeHandling : undefined;
            resourceInputs["schemas"] = args ? args.schemas : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FivetranConnectorSchemaConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FivetranConnectorSchemaConfig resources.
 */
export interface FivetranConnectorSchemaConfigState {
    /**
     * The unique identifier for the connector within the Fivetran system.
     */
    connectorId?: pulumi.Input<string>;
    schemaChangeHandling?: pulumi.Input<string>;
    schemas?: pulumi.Input<pulumi.Input<inputs.FivetranConnectorSchemaConfigSchema>[]>;
}

/**
 * The set of arguments for constructing a FivetranConnectorSchemaConfig resource.
 */
export interface FivetranConnectorSchemaConfigArgs {
    /**
     * The unique identifier for the connector within the Fivetran system.
     */
    connectorId: pulumi.Input<string>;
    schemaChangeHandling: pulumi.Input<string>;
    schemas?: pulumi.Input<pulumi.Input<inputs.FivetranConnectorSchemaConfigSchema>[]>;
}
