// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran/internal"
)

// This resource allows you to create, update, and delete user memberships in groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewFivetranConnectorGroupUsers(ctx, "groupUsers", &fivetran.FivetranConnectorGroupUsersArgs{
//				GroupId: pulumi.Any(fivetran_group.Group.Id),
//				Users: fivetran.FivetranConnectorGroupUsersUserArray{
//					&fivetran.FivetranConnectorGroupUsersUserArgs{
//						Email: pulumi.String("mail@example.com"),
//						Role:  pulumi.String("Destination Analyst"),
//					},
//					&fivetran.FivetranConnectorGroupUsersUserArgs{
//						Email: pulumi.String("another_mail@example.com"),
//						Role:  pulumi.String("Destination Analyst"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FivetranConnectorGroupUsers struct {
	pulumi.CustomResourceState

	// The unique identifier for the Group within the Fivetran system.
	GroupId     pulumi.StringOutput                        `pulumi:"groupId"`
	LastUpdated pulumi.StringOutput                        `pulumi:"lastUpdated"`
	Users       FivetranConnectorGroupUsersUserArrayOutput `pulumi:"users"`
}

// NewFivetranConnectorGroupUsers registers a new resource with the given unique name, arguments, and options.
func NewFivetranConnectorGroupUsers(ctx *pulumi.Context,
	name string, args *FivetranConnectorGroupUsersArgs, opts ...pulumi.ResourceOption) (*FivetranConnectorGroupUsers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FivetranConnectorGroupUsers
	err := ctx.RegisterResource("fivetran:index/fivetranConnectorGroupUsers:FivetranConnectorGroupUsers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFivetranConnectorGroupUsers gets an existing FivetranConnectorGroupUsers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFivetranConnectorGroupUsers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FivetranConnectorGroupUsersState, opts ...pulumi.ResourceOption) (*FivetranConnectorGroupUsers, error) {
	var resource FivetranConnectorGroupUsers
	err := ctx.ReadResource("fivetran:index/fivetranConnectorGroupUsers:FivetranConnectorGroupUsers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FivetranConnectorGroupUsers resources.
type fivetranConnectorGroupUsersState struct {
	// The unique identifier for the Group within the Fivetran system.
	GroupId     *string                           `pulumi:"groupId"`
	LastUpdated *string                           `pulumi:"lastUpdated"`
	Users       []FivetranConnectorGroupUsersUser `pulumi:"users"`
}

type FivetranConnectorGroupUsersState struct {
	// The unique identifier for the Group within the Fivetran system.
	GroupId     pulumi.StringPtrInput
	LastUpdated pulumi.StringPtrInput
	Users       FivetranConnectorGroupUsersUserArrayInput
}

func (FivetranConnectorGroupUsersState) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorGroupUsersState)(nil)).Elem()
}

type fivetranConnectorGroupUsersArgs struct {
	// The unique identifier for the Group within the Fivetran system.
	GroupId string                            `pulumi:"groupId"`
	Users   []FivetranConnectorGroupUsersUser `pulumi:"users"`
}

// The set of arguments for constructing a FivetranConnectorGroupUsers resource.
type FivetranConnectorGroupUsersArgs struct {
	// The unique identifier for the Group within the Fivetran system.
	GroupId pulumi.StringInput
	Users   FivetranConnectorGroupUsersUserArrayInput
}

func (FivetranConnectorGroupUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorGroupUsersArgs)(nil)).Elem()
}

type FivetranConnectorGroupUsersInput interface {
	pulumi.Input

	ToFivetranConnectorGroupUsersOutput() FivetranConnectorGroupUsersOutput
	ToFivetranConnectorGroupUsersOutputWithContext(ctx context.Context) FivetranConnectorGroupUsersOutput
}

func (*FivetranConnectorGroupUsers) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorGroupUsers)(nil)).Elem()
}

func (i *FivetranConnectorGroupUsers) ToFivetranConnectorGroupUsersOutput() FivetranConnectorGroupUsersOutput {
	return i.ToFivetranConnectorGroupUsersOutputWithContext(context.Background())
}

func (i *FivetranConnectorGroupUsers) ToFivetranConnectorGroupUsersOutputWithContext(ctx context.Context) FivetranConnectorGroupUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorGroupUsersOutput)
}

func (i *FivetranConnectorGroupUsers) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorGroupUsers] {
	return pulumix.Output[*FivetranConnectorGroupUsers]{
		OutputState: i.ToFivetranConnectorGroupUsersOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorGroupUsersArrayInput is an input type that accepts FivetranConnectorGroupUsersArray and FivetranConnectorGroupUsersArrayOutput values.
// You can construct a concrete instance of `FivetranConnectorGroupUsersArrayInput` via:
//
//	FivetranConnectorGroupUsersArray{ FivetranConnectorGroupUsersArgs{...} }
type FivetranConnectorGroupUsersArrayInput interface {
	pulumi.Input

	ToFivetranConnectorGroupUsersArrayOutput() FivetranConnectorGroupUsersArrayOutput
	ToFivetranConnectorGroupUsersArrayOutputWithContext(context.Context) FivetranConnectorGroupUsersArrayOutput
}

type FivetranConnectorGroupUsersArray []FivetranConnectorGroupUsersInput

func (FivetranConnectorGroupUsersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorGroupUsers)(nil)).Elem()
}

func (i FivetranConnectorGroupUsersArray) ToFivetranConnectorGroupUsersArrayOutput() FivetranConnectorGroupUsersArrayOutput {
	return i.ToFivetranConnectorGroupUsersArrayOutputWithContext(context.Background())
}

func (i FivetranConnectorGroupUsersArray) ToFivetranConnectorGroupUsersArrayOutputWithContext(ctx context.Context) FivetranConnectorGroupUsersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorGroupUsersArrayOutput)
}

func (i FivetranConnectorGroupUsersArray) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorGroupUsers] {
	return pulumix.Output[[]*FivetranConnectorGroupUsers]{
		OutputState: i.ToFivetranConnectorGroupUsersArrayOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorGroupUsersMapInput is an input type that accepts FivetranConnectorGroupUsersMap and FivetranConnectorGroupUsersMapOutput values.
// You can construct a concrete instance of `FivetranConnectorGroupUsersMapInput` via:
//
//	FivetranConnectorGroupUsersMap{ "key": FivetranConnectorGroupUsersArgs{...} }
type FivetranConnectorGroupUsersMapInput interface {
	pulumi.Input

	ToFivetranConnectorGroupUsersMapOutput() FivetranConnectorGroupUsersMapOutput
	ToFivetranConnectorGroupUsersMapOutputWithContext(context.Context) FivetranConnectorGroupUsersMapOutput
}

type FivetranConnectorGroupUsersMap map[string]FivetranConnectorGroupUsersInput

func (FivetranConnectorGroupUsersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorGroupUsers)(nil)).Elem()
}

func (i FivetranConnectorGroupUsersMap) ToFivetranConnectorGroupUsersMapOutput() FivetranConnectorGroupUsersMapOutput {
	return i.ToFivetranConnectorGroupUsersMapOutputWithContext(context.Background())
}

func (i FivetranConnectorGroupUsersMap) ToFivetranConnectorGroupUsersMapOutputWithContext(ctx context.Context) FivetranConnectorGroupUsersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorGroupUsersMapOutput)
}

func (i FivetranConnectorGroupUsersMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorGroupUsers] {
	return pulumix.Output[map[string]*FivetranConnectorGroupUsers]{
		OutputState: i.ToFivetranConnectorGroupUsersMapOutputWithContext(ctx).OutputState,
	}
}

type FivetranConnectorGroupUsersOutput struct{ *pulumi.OutputState }

func (FivetranConnectorGroupUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorGroupUsers)(nil)).Elem()
}

func (o FivetranConnectorGroupUsersOutput) ToFivetranConnectorGroupUsersOutput() FivetranConnectorGroupUsersOutput {
	return o
}

func (o FivetranConnectorGroupUsersOutput) ToFivetranConnectorGroupUsersOutputWithContext(ctx context.Context) FivetranConnectorGroupUsersOutput {
	return o
}

func (o FivetranConnectorGroupUsersOutput) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorGroupUsers] {
	return pulumix.Output[*FivetranConnectorGroupUsers]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the Group within the Fivetran system.
func (o FivetranConnectorGroupUsersOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorGroupUsers) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o FivetranConnectorGroupUsersOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorGroupUsers) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

func (o FivetranConnectorGroupUsersOutput) Users() FivetranConnectorGroupUsersUserArrayOutput {
	return o.ApplyT(func(v *FivetranConnectorGroupUsers) FivetranConnectorGroupUsersUserArrayOutput { return v.Users }).(FivetranConnectorGroupUsersUserArrayOutput)
}

type FivetranConnectorGroupUsersArrayOutput struct{ *pulumi.OutputState }

func (FivetranConnectorGroupUsersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorGroupUsers)(nil)).Elem()
}

func (o FivetranConnectorGroupUsersArrayOutput) ToFivetranConnectorGroupUsersArrayOutput() FivetranConnectorGroupUsersArrayOutput {
	return o
}

func (o FivetranConnectorGroupUsersArrayOutput) ToFivetranConnectorGroupUsersArrayOutputWithContext(ctx context.Context) FivetranConnectorGroupUsersArrayOutput {
	return o
}

func (o FivetranConnectorGroupUsersArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorGroupUsers] {
	return pulumix.Output[[]*FivetranConnectorGroupUsers]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorGroupUsersArrayOutput) Index(i pulumi.IntInput) FivetranConnectorGroupUsersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FivetranConnectorGroupUsers {
		return vs[0].([]*FivetranConnectorGroupUsers)[vs[1].(int)]
	}).(FivetranConnectorGroupUsersOutput)
}

type FivetranConnectorGroupUsersMapOutput struct{ *pulumi.OutputState }

func (FivetranConnectorGroupUsersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorGroupUsers)(nil)).Elem()
}

func (o FivetranConnectorGroupUsersMapOutput) ToFivetranConnectorGroupUsersMapOutput() FivetranConnectorGroupUsersMapOutput {
	return o
}

func (o FivetranConnectorGroupUsersMapOutput) ToFivetranConnectorGroupUsersMapOutputWithContext(ctx context.Context) FivetranConnectorGroupUsersMapOutput {
	return o
}

func (o FivetranConnectorGroupUsersMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorGroupUsers] {
	return pulumix.Output[map[string]*FivetranConnectorGroupUsers]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorGroupUsersMapOutput) MapIndex(k pulumi.StringInput) FivetranConnectorGroupUsersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FivetranConnectorGroupUsers {
		return vs[0].(map[string]*FivetranConnectorGroupUsers)[vs[1].(string)]
	}).(FivetranConnectorGroupUsersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorGroupUsersInput)(nil)).Elem(), &FivetranConnectorGroupUsers{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorGroupUsersArrayInput)(nil)).Elem(), FivetranConnectorGroupUsersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorGroupUsersMapInput)(nil)).Elem(), FivetranConnectorGroupUsersMap{})
	pulumi.RegisterOutputType(FivetranConnectorGroupUsersOutput{})
	pulumi.RegisterOutputType(FivetranConnectorGroupUsersArrayOutput{})
	pulumi.RegisterOutputType(FivetranConnectorGroupUsersMapOutput{})
}
