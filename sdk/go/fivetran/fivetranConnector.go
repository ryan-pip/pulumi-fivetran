// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran/internal"
)

// ## Import
//
// ### How to authorize connector
type FivetranConnector struct {
	pulumi.CustomResourceState

	Auth   FivetranConnectorAuthPtrOutput `pulumi:"auth"`
	Config FivetranConnectorConfigOutput  `pulumi:"config"`
	// The unique identifier of the user who has created the connector in your account
	ConnectedBy pulumi.StringOutput `pulumi:"connectedBy"`
	// The timestamp of the time the connector was created in your account
	CreatedAt         pulumi.StringOutput                      `pulumi:"createdAt"`
	DestinationSchema FivetranConnectorDestinationSchemaOutput `pulumi:"destinationSchema"`
	// The unique identifier for the Group (Destination) within the Fivetran system.
	GroupId     pulumi.StringOutput `pulumi:"groupId"`
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// The name used both as the connector's name within the Fivetran system and as the source schema's name within your
	// destination.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests pulumi.StringPtrOutput `pulumi:"runSetupTests"`
	// The connector type name within the Fivetran system.
	Service pulumi.StringOutput `pulumi:"service"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates pulumi.StringPtrOutput `pulumi:"trustCertificates"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints pulumi.StringPtrOutput `pulumi:"trustFingerprints"`
}

// NewFivetranConnector registers a new resource with the given unique name, arguments, and options.
func NewFivetranConnector(ctx *pulumi.Context,
	name string, args *FivetranConnectorArgs, opts ...pulumi.ResourceOption) (*FivetranConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationSchema == nil {
		return nil, errors.New("invalid value for required argument 'DestinationSchema'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FivetranConnector
	err := ctx.RegisterResource("fivetran:index/fivetranConnector:FivetranConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFivetranConnector gets an existing FivetranConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFivetranConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FivetranConnectorState, opts ...pulumi.ResourceOption) (*FivetranConnector, error) {
	var resource FivetranConnector
	err := ctx.ReadResource("fivetran:index/fivetranConnector:FivetranConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FivetranConnector resources.
type fivetranConnectorState struct {
	Auth   *FivetranConnectorAuth   `pulumi:"auth"`
	Config *FivetranConnectorConfig `pulumi:"config"`
	// The unique identifier of the user who has created the connector in your account
	ConnectedBy *string `pulumi:"connectedBy"`
	// The timestamp of the time the connector was created in your account
	CreatedAt         *string                             `pulumi:"createdAt"`
	DestinationSchema *FivetranConnectorDestinationSchema `pulumi:"destinationSchema"`
	// The unique identifier for the Group (Destination) within the Fivetran system.
	GroupId     *string `pulumi:"groupId"`
	LastUpdated *string `pulumi:"lastUpdated"`
	// The name used both as the connector's name within the Fivetran system and as the source schema's name within your
	// destination.
	Name *string `pulumi:"name"`
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests *string `pulumi:"runSetupTests"`
	// The connector type name within the Fivetran system.
	Service *string `pulumi:"service"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates *string `pulumi:"trustCertificates"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints *string `pulumi:"trustFingerprints"`
}

type FivetranConnectorState struct {
	Auth   FivetranConnectorAuthPtrInput
	Config FivetranConnectorConfigPtrInput
	// The unique identifier of the user who has created the connector in your account
	ConnectedBy pulumi.StringPtrInput
	// The timestamp of the time the connector was created in your account
	CreatedAt         pulumi.StringPtrInput
	DestinationSchema FivetranConnectorDestinationSchemaPtrInput
	// The unique identifier for the Group (Destination) within the Fivetran system.
	GroupId     pulumi.StringPtrInput
	LastUpdated pulumi.StringPtrInput
	// The name used both as the connector's name within the Fivetran system and as the source schema's name within your
	// destination.
	Name pulumi.StringPtrInput
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests pulumi.StringPtrInput
	// The connector type name within the Fivetran system.
	Service pulumi.StringPtrInput
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates pulumi.StringPtrInput
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints pulumi.StringPtrInput
}

func (FivetranConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorState)(nil)).Elem()
}

type fivetranConnectorArgs struct {
	Auth              *FivetranConnectorAuth             `pulumi:"auth"`
	Config            *FivetranConnectorConfig           `pulumi:"config"`
	DestinationSchema FivetranConnectorDestinationSchema `pulumi:"destinationSchema"`
	// The unique identifier for the Group (Destination) within the Fivetran system.
	GroupId string `pulumi:"groupId"`
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests *string `pulumi:"runSetupTests"`
	// The connector type name within the Fivetran system.
	Service string `pulumi:"service"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates *string `pulumi:"trustCertificates"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints *string `pulumi:"trustFingerprints"`
}

// The set of arguments for constructing a FivetranConnector resource.
type FivetranConnectorArgs struct {
	Auth              FivetranConnectorAuthPtrInput
	Config            FivetranConnectorConfigPtrInput
	DestinationSchema FivetranConnectorDestinationSchemaInput
	// The unique identifier for the Group (Destination) within the Fivetran system.
	GroupId pulumi.StringInput
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests pulumi.StringPtrInput
	// The connector type name within the Fivetran system.
	Service pulumi.StringInput
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates pulumi.StringPtrInput
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints pulumi.StringPtrInput
}

func (FivetranConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorArgs)(nil)).Elem()
}

type FivetranConnectorInput interface {
	pulumi.Input

	ToFivetranConnectorOutput() FivetranConnectorOutput
	ToFivetranConnectorOutputWithContext(ctx context.Context) FivetranConnectorOutput
}

func (*FivetranConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnector)(nil)).Elem()
}

func (i *FivetranConnector) ToFivetranConnectorOutput() FivetranConnectorOutput {
	return i.ToFivetranConnectorOutputWithContext(context.Background())
}

func (i *FivetranConnector) ToFivetranConnectorOutputWithContext(ctx context.Context) FivetranConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorOutput)
}

func (i *FivetranConnector) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnector] {
	return pulumix.Output[*FivetranConnector]{
		OutputState: i.ToFivetranConnectorOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorArrayInput is an input type that accepts FivetranConnectorArray and FivetranConnectorArrayOutput values.
// You can construct a concrete instance of `FivetranConnectorArrayInput` via:
//
//	FivetranConnectorArray{ FivetranConnectorArgs{...} }
type FivetranConnectorArrayInput interface {
	pulumi.Input

	ToFivetranConnectorArrayOutput() FivetranConnectorArrayOutput
	ToFivetranConnectorArrayOutputWithContext(context.Context) FivetranConnectorArrayOutput
}

type FivetranConnectorArray []FivetranConnectorInput

func (FivetranConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnector)(nil)).Elem()
}

func (i FivetranConnectorArray) ToFivetranConnectorArrayOutput() FivetranConnectorArrayOutput {
	return i.ToFivetranConnectorArrayOutputWithContext(context.Background())
}

func (i FivetranConnectorArray) ToFivetranConnectorArrayOutputWithContext(ctx context.Context) FivetranConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorArrayOutput)
}

func (i FivetranConnectorArray) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnector] {
	return pulumix.Output[[]*FivetranConnector]{
		OutputState: i.ToFivetranConnectorArrayOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorMapInput is an input type that accepts FivetranConnectorMap and FivetranConnectorMapOutput values.
// You can construct a concrete instance of `FivetranConnectorMapInput` via:
//
//	FivetranConnectorMap{ "key": FivetranConnectorArgs{...} }
type FivetranConnectorMapInput interface {
	pulumi.Input

	ToFivetranConnectorMapOutput() FivetranConnectorMapOutput
	ToFivetranConnectorMapOutputWithContext(context.Context) FivetranConnectorMapOutput
}

type FivetranConnectorMap map[string]FivetranConnectorInput

func (FivetranConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnector)(nil)).Elem()
}

func (i FivetranConnectorMap) ToFivetranConnectorMapOutput() FivetranConnectorMapOutput {
	return i.ToFivetranConnectorMapOutputWithContext(context.Background())
}

func (i FivetranConnectorMap) ToFivetranConnectorMapOutputWithContext(ctx context.Context) FivetranConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorMapOutput)
}

func (i FivetranConnectorMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnector] {
	return pulumix.Output[map[string]*FivetranConnector]{
		OutputState: i.ToFivetranConnectorMapOutputWithContext(ctx).OutputState,
	}
}

type FivetranConnectorOutput struct{ *pulumi.OutputState }

func (FivetranConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnector)(nil)).Elem()
}

func (o FivetranConnectorOutput) ToFivetranConnectorOutput() FivetranConnectorOutput {
	return o
}

func (o FivetranConnectorOutput) ToFivetranConnectorOutputWithContext(ctx context.Context) FivetranConnectorOutput {
	return o
}

func (o FivetranConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnector] {
	return pulumix.Output[*FivetranConnector]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorOutput) Auth() FivetranConnectorAuthPtrOutput {
	return o.ApplyT(func(v *FivetranConnector) FivetranConnectorAuthPtrOutput { return v.Auth }).(FivetranConnectorAuthPtrOutput)
}

func (o FivetranConnectorOutput) Config() FivetranConnectorConfigOutput {
	return o.ApplyT(func(v *FivetranConnector) FivetranConnectorConfigOutput { return v.Config }).(FivetranConnectorConfigOutput)
}

// The unique identifier of the user who has created the connector in your account
func (o FivetranConnectorOutput) ConnectedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnector) pulumi.StringOutput { return v.ConnectedBy }).(pulumi.StringOutput)
}

// The timestamp of the time the connector was created in your account
func (o FivetranConnectorOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnector) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o FivetranConnectorOutput) DestinationSchema() FivetranConnectorDestinationSchemaOutput {
	return o.ApplyT(func(v *FivetranConnector) FivetranConnectorDestinationSchemaOutput { return v.DestinationSchema }).(FivetranConnectorDestinationSchemaOutput)
}

// The unique identifier for the Group (Destination) within the Fivetran system.
func (o FivetranConnectorOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnector) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o FivetranConnectorOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnector) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// The name used both as the connector's name within the Fivetran system and as the source schema's name within your
// destination.
func (o FivetranConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the setup tests should be run automatically. The default value is TRUE.
func (o FivetranConnectorOutput) RunSetupTests() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FivetranConnector) pulumi.StringPtrOutput { return v.RunSetupTests }).(pulumi.StringPtrOutput)
}

// The connector type name within the Fivetran system.
func (o FivetranConnectorOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnector) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
func (o FivetranConnectorOutput) TrustCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FivetranConnector) pulumi.StringPtrOutput { return v.TrustCertificates }).(pulumi.StringPtrOutput)
}

// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
func (o FivetranConnectorOutput) TrustFingerprints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FivetranConnector) pulumi.StringPtrOutput { return v.TrustFingerprints }).(pulumi.StringPtrOutput)
}

type FivetranConnectorArrayOutput struct{ *pulumi.OutputState }

func (FivetranConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnector)(nil)).Elem()
}

func (o FivetranConnectorArrayOutput) ToFivetranConnectorArrayOutput() FivetranConnectorArrayOutput {
	return o
}

func (o FivetranConnectorArrayOutput) ToFivetranConnectorArrayOutputWithContext(ctx context.Context) FivetranConnectorArrayOutput {
	return o
}

func (o FivetranConnectorArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnector] {
	return pulumix.Output[[]*FivetranConnector]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorArrayOutput) Index(i pulumi.IntInput) FivetranConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FivetranConnector {
		return vs[0].([]*FivetranConnector)[vs[1].(int)]
	}).(FivetranConnectorOutput)
}

type FivetranConnectorMapOutput struct{ *pulumi.OutputState }

func (FivetranConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnector)(nil)).Elem()
}

func (o FivetranConnectorMapOutput) ToFivetranConnectorMapOutput() FivetranConnectorMapOutput {
	return o
}

func (o FivetranConnectorMapOutput) ToFivetranConnectorMapOutputWithContext(ctx context.Context) FivetranConnectorMapOutput {
	return o
}

func (o FivetranConnectorMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnector] {
	return pulumix.Output[map[string]*FivetranConnector]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorMapOutput) MapIndex(k pulumi.StringInput) FivetranConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FivetranConnector {
		return vs[0].(map[string]*FivetranConnector)[vs[1].(string)]
	}).(FivetranConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorInput)(nil)).Elem(), &FivetranConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorArrayInput)(nil)).Elem(), FivetranConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorMapInput)(nil)).Elem(), FivetranConnectorMap{})
	pulumi.RegisterOutputType(FivetranConnectorOutput{})
	pulumi.RegisterOutputType(FivetranConnectorArrayOutput{})
	pulumi.RegisterOutputType(FivetranConnectorMapOutput{})
}
