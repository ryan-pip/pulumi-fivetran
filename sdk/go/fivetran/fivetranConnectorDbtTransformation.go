// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran/internal"
)

// Resource is in ALPHA state.
//
// This resource allows you to add, manage and delete dbt Transformations for existing dbt Model.
// To retrieve available dbt Models use this [Retrieve dbt Project models](https://fivetran.com/docs/rest-api/dbt-transformation-management#retrievedbtprojectmodels) endpoint.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewFivetranConnectorDbtTransformation(ctx, "transformation", &fivetran.FivetranConnectorDbtTransformationArgs{
//				DbtModelName: pulumi.String("dbt_model_name"),
//				DbtProjectId: pulumi.String("dbt_project_id"),
//				Paused:       pulumi.Bool(false),
//				RunTests:     pulumi.Bool(false),
//				Schedule: &fivetran.FivetranConnectorDbtTransformationScheduleArgs{
//					DaysOfWeeks: pulumi.StringArray{
//						pulumi.String("MONDAY"),
//						pulumi.String("SATURDAY"),
//					},
//					ScheduleType: pulumi.String("TIME_OF_DAY"),
//					TimeOfDay:    pulumi.String("12:00"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// 1. To import an existing `fivetran_dbt_transformation` resource into your Terraform state, you need to get **Transformation ID** on the transformation page in your Fivetran dashboard. 2. Define an empty resource in your `.tf` configurationhcl resource "fivetran_dbt_transformation" "my_imported_fivetran_dbt_transformation" { }
//
// ```sh
//
//	$ pulumi import fivetran:index/fivetranConnectorDbtTransformation:FivetranConnectorDbtTransformation
//
// Run the `terraform import` command
// ```
//
// ```sh
//
//	$ pulumi import fivetran:index/fivetranConnectorDbtTransformation:FivetranConnectorDbtTransformation my_imported_fivetran_dbt_transformation {Transformation ID}
//
// ```
//
//  4. Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_dbt_transformation.my_imported_fivetran_dbt_transformation' 5. Copy the values and paste them to your `.tf` configuration.
type FivetranConnectorDbtTransformation struct {
	pulumi.CustomResourceState

	// Identifiers of related connectors.
	ConnectorIds pulumi.StringArrayOutput `pulumi:"connectorIds"`
	// The timestamp of the dbt Transformation creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The unique identifier for the dbt Model within the Fivetran system.
	DbtModelId pulumi.StringOutput `pulumi:"dbtModelId"`
	// Target dbt Model name.
	DbtModelName pulumi.StringOutput `pulumi:"dbtModelName"`
	// The unique identifier for the dbt Project within the Fivetran system.
	DbtProjectId pulumi.StringOutput `pulumi:"dbtProjectId"`
	// Identifiers of related models.
	ModelIds pulumi.StringArrayOutput `pulumi:"modelIds"`
	// The dbt Model name.
	OutputModelName pulumi.StringOutput `pulumi:"outputModelName"`
	// The field indicating whether the transformation will be created in paused state. By default, the value is false.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
	RunTests pulumi.BoolOutput `pulumi:"runTests"`
	// dbt Transformation schedule parameters.
	Schedule FivetranConnectorDbtTransformationScheduleOutput `pulumi:"schedule"`
}

// NewFivetranConnectorDbtTransformation registers a new resource with the given unique name, arguments, and options.
func NewFivetranConnectorDbtTransformation(ctx *pulumi.Context,
	name string, args *FivetranConnectorDbtTransformationArgs, opts ...pulumi.ResourceOption) (*FivetranConnectorDbtTransformation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbtModelName == nil {
		return nil, errors.New("invalid value for required argument 'DbtModelName'")
	}
	if args.DbtProjectId == nil {
		return nil, errors.New("invalid value for required argument 'DbtProjectId'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.RunTests == nil {
		return nil, errors.New("invalid value for required argument 'RunTests'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FivetranConnectorDbtTransformation
	err := ctx.RegisterResource("fivetran:index/fivetranConnectorDbtTransformation:FivetranConnectorDbtTransformation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFivetranConnectorDbtTransformation gets an existing FivetranConnectorDbtTransformation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFivetranConnectorDbtTransformation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FivetranConnectorDbtTransformationState, opts ...pulumi.ResourceOption) (*FivetranConnectorDbtTransformation, error) {
	var resource FivetranConnectorDbtTransformation
	err := ctx.ReadResource("fivetran:index/fivetranConnectorDbtTransformation:FivetranConnectorDbtTransformation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FivetranConnectorDbtTransformation resources.
type fivetranConnectorDbtTransformationState struct {
	// Identifiers of related connectors.
	ConnectorIds []string `pulumi:"connectorIds"`
	// The timestamp of the dbt Transformation creation.
	CreatedAt *string `pulumi:"createdAt"`
	// The unique identifier for the dbt Model within the Fivetran system.
	DbtModelId *string `pulumi:"dbtModelId"`
	// Target dbt Model name.
	DbtModelName *string `pulumi:"dbtModelName"`
	// The unique identifier for the dbt Project within the Fivetran system.
	DbtProjectId *string `pulumi:"dbtProjectId"`
	// Identifiers of related models.
	ModelIds []string `pulumi:"modelIds"`
	// The dbt Model name.
	OutputModelName *string `pulumi:"outputModelName"`
	// The field indicating whether the transformation will be created in paused state. By default, the value is false.
	Paused *bool `pulumi:"paused"`
	// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
	RunTests *bool `pulumi:"runTests"`
	// dbt Transformation schedule parameters.
	Schedule *FivetranConnectorDbtTransformationSchedule `pulumi:"schedule"`
}

type FivetranConnectorDbtTransformationState struct {
	// Identifiers of related connectors.
	ConnectorIds pulumi.StringArrayInput
	// The timestamp of the dbt Transformation creation.
	CreatedAt pulumi.StringPtrInput
	// The unique identifier for the dbt Model within the Fivetran system.
	DbtModelId pulumi.StringPtrInput
	// Target dbt Model name.
	DbtModelName pulumi.StringPtrInput
	// The unique identifier for the dbt Project within the Fivetran system.
	DbtProjectId pulumi.StringPtrInput
	// Identifiers of related models.
	ModelIds pulumi.StringArrayInput
	// The dbt Model name.
	OutputModelName pulumi.StringPtrInput
	// The field indicating whether the transformation will be created in paused state. By default, the value is false.
	Paused pulumi.BoolPtrInput
	// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
	RunTests pulumi.BoolPtrInput
	// dbt Transformation schedule parameters.
	Schedule FivetranConnectorDbtTransformationSchedulePtrInput
}

func (FivetranConnectorDbtTransformationState) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorDbtTransformationState)(nil)).Elem()
}

type fivetranConnectorDbtTransformationArgs struct {
	// Target dbt Model name.
	DbtModelName string `pulumi:"dbtModelName"`
	// The unique identifier for the dbt Project within the Fivetran system.
	DbtProjectId string `pulumi:"dbtProjectId"`
	// The field indicating whether the transformation will be created in paused state. By default, the value is false.
	Paused bool `pulumi:"paused"`
	// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
	RunTests bool `pulumi:"runTests"`
	// dbt Transformation schedule parameters.
	Schedule FivetranConnectorDbtTransformationSchedule `pulumi:"schedule"`
}

// The set of arguments for constructing a FivetranConnectorDbtTransformation resource.
type FivetranConnectorDbtTransformationArgs struct {
	// Target dbt Model name.
	DbtModelName pulumi.StringInput
	// The unique identifier for the dbt Project within the Fivetran system.
	DbtProjectId pulumi.StringInput
	// The field indicating whether the transformation will be created in paused state. By default, the value is false.
	Paused pulumi.BoolInput
	// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
	RunTests pulumi.BoolInput
	// dbt Transformation schedule parameters.
	Schedule FivetranConnectorDbtTransformationScheduleInput
}

func (FivetranConnectorDbtTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorDbtTransformationArgs)(nil)).Elem()
}

type FivetranConnectorDbtTransformationInput interface {
	pulumi.Input

	ToFivetranConnectorDbtTransformationOutput() FivetranConnectorDbtTransformationOutput
	ToFivetranConnectorDbtTransformationOutputWithContext(ctx context.Context) FivetranConnectorDbtTransformationOutput
}

func (*FivetranConnectorDbtTransformation) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorDbtTransformation)(nil)).Elem()
}

func (i *FivetranConnectorDbtTransformation) ToFivetranConnectorDbtTransformationOutput() FivetranConnectorDbtTransformationOutput {
	return i.ToFivetranConnectorDbtTransformationOutputWithContext(context.Background())
}

func (i *FivetranConnectorDbtTransformation) ToFivetranConnectorDbtTransformationOutputWithContext(ctx context.Context) FivetranConnectorDbtTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorDbtTransformationOutput)
}

func (i *FivetranConnectorDbtTransformation) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorDbtTransformation] {
	return pulumix.Output[*FivetranConnectorDbtTransformation]{
		OutputState: i.ToFivetranConnectorDbtTransformationOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorDbtTransformationArrayInput is an input type that accepts FivetranConnectorDbtTransformationArray and FivetranConnectorDbtTransformationArrayOutput values.
// You can construct a concrete instance of `FivetranConnectorDbtTransformationArrayInput` via:
//
//	FivetranConnectorDbtTransformationArray{ FivetranConnectorDbtTransformationArgs{...} }
type FivetranConnectorDbtTransformationArrayInput interface {
	pulumi.Input

	ToFivetranConnectorDbtTransformationArrayOutput() FivetranConnectorDbtTransformationArrayOutput
	ToFivetranConnectorDbtTransformationArrayOutputWithContext(context.Context) FivetranConnectorDbtTransformationArrayOutput
}

type FivetranConnectorDbtTransformationArray []FivetranConnectorDbtTransformationInput

func (FivetranConnectorDbtTransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorDbtTransformation)(nil)).Elem()
}

func (i FivetranConnectorDbtTransformationArray) ToFivetranConnectorDbtTransformationArrayOutput() FivetranConnectorDbtTransformationArrayOutput {
	return i.ToFivetranConnectorDbtTransformationArrayOutputWithContext(context.Background())
}

func (i FivetranConnectorDbtTransformationArray) ToFivetranConnectorDbtTransformationArrayOutputWithContext(ctx context.Context) FivetranConnectorDbtTransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorDbtTransformationArrayOutput)
}

func (i FivetranConnectorDbtTransformationArray) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorDbtTransformation] {
	return pulumix.Output[[]*FivetranConnectorDbtTransformation]{
		OutputState: i.ToFivetranConnectorDbtTransformationArrayOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorDbtTransformationMapInput is an input type that accepts FivetranConnectorDbtTransformationMap and FivetranConnectorDbtTransformationMapOutput values.
// You can construct a concrete instance of `FivetranConnectorDbtTransformationMapInput` via:
//
//	FivetranConnectorDbtTransformationMap{ "key": FivetranConnectorDbtTransformationArgs{...} }
type FivetranConnectorDbtTransformationMapInput interface {
	pulumi.Input

	ToFivetranConnectorDbtTransformationMapOutput() FivetranConnectorDbtTransformationMapOutput
	ToFivetranConnectorDbtTransformationMapOutputWithContext(context.Context) FivetranConnectorDbtTransformationMapOutput
}

type FivetranConnectorDbtTransformationMap map[string]FivetranConnectorDbtTransformationInput

func (FivetranConnectorDbtTransformationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorDbtTransformation)(nil)).Elem()
}

func (i FivetranConnectorDbtTransformationMap) ToFivetranConnectorDbtTransformationMapOutput() FivetranConnectorDbtTransformationMapOutput {
	return i.ToFivetranConnectorDbtTransformationMapOutputWithContext(context.Background())
}

func (i FivetranConnectorDbtTransformationMap) ToFivetranConnectorDbtTransformationMapOutputWithContext(ctx context.Context) FivetranConnectorDbtTransformationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorDbtTransformationMapOutput)
}

func (i FivetranConnectorDbtTransformationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorDbtTransformation] {
	return pulumix.Output[map[string]*FivetranConnectorDbtTransformation]{
		OutputState: i.ToFivetranConnectorDbtTransformationMapOutputWithContext(ctx).OutputState,
	}
}

type FivetranConnectorDbtTransformationOutput struct{ *pulumi.OutputState }

func (FivetranConnectorDbtTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorDbtTransformation)(nil)).Elem()
}

func (o FivetranConnectorDbtTransformationOutput) ToFivetranConnectorDbtTransformationOutput() FivetranConnectorDbtTransformationOutput {
	return o
}

func (o FivetranConnectorDbtTransformationOutput) ToFivetranConnectorDbtTransformationOutputWithContext(ctx context.Context) FivetranConnectorDbtTransformationOutput {
	return o
}

func (o FivetranConnectorDbtTransformationOutput) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorDbtTransformation] {
	return pulumix.Output[*FivetranConnectorDbtTransformation]{
		OutputState: o.OutputState,
	}
}

// Identifiers of related connectors.
func (o FivetranConnectorDbtTransformationOutput) ConnectorIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtTransformation) pulumi.StringArrayOutput { return v.ConnectorIds }).(pulumi.StringArrayOutput)
}

// The timestamp of the dbt Transformation creation.
func (o FivetranConnectorDbtTransformationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtTransformation) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique identifier for the dbt Model within the Fivetran system.
func (o FivetranConnectorDbtTransformationOutput) DbtModelId() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtTransformation) pulumi.StringOutput { return v.DbtModelId }).(pulumi.StringOutput)
}

// Target dbt Model name.
func (o FivetranConnectorDbtTransformationOutput) DbtModelName() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtTransformation) pulumi.StringOutput { return v.DbtModelName }).(pulumi.StringOutput)
}

// The unique identifier for the dbt Project within the Fivetran system.
func (o FivetranConnectorDbtTransformationOutput) DbtProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtTransformation) pulumi.StringOutput { return v.DbtProjectId }).(pulumi.StringOutput)
}

// Identifiers of related models.
func (o FivetranConnectorDbtTransformationOutput) ModelIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtTransformation) pulumi.StringArrayOutput { return v.ModelIds }).(pulumi.StringArrayOutput)
}

// The dbt Model name.
func (o FivetranConnectorDbtTransformationOutput) OutputModelName() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtTransformation) pulumi.StringOutput { return v.OutputModelName }).(pulumi.StringOutput)
}

// The field indicating whether the transformation will be created in paused state. By default, the value is false.
func (o FivetranConnectorDbtTransformationOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtTransformation) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
func (o FivetranConnectorDbtTransformationOutput) RunTests() pulumi.BoolOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtTransformation) pulumi.BoolOutput { return v.RunTests }).(pulumi.BoolOutput)
}

// dbt Transformation schedule parameters.
func (o FivetranConnectorDbtTransformationOutput) Schedule() FivetranConnectorDbtTransformationScheduleOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtTransformation) FivetranConnectorDbtTransformationScheduleOutput {
		return v.Schedule
	}).(FivetranConnectorDbtTransformationScheduleOutput)
}

type FivetranConnectorDbtTransformationArrayOutput struct{ *pulumi.OutputState }

func (FivetranConnectorDbtTransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorDbtTransformation)(nil)).Elem()
}

func (o FivetranConnectorDbtTransformationArrayOutput) ToFivetranConnectorDbtTransformationArrayOutput() FivetranConnectorDbtTransformationArrayOutput {
	return o
}

func (o FivetranConnectorDbtTransformationArrayOutput) ToFivetranConnectorDbtTransformationArrayOutputWithContext(ctx context.Context) FivetranConnectorDbtTransformationArrayOutput {
	return o
}

func (o FivetranConnectorDbtTransformationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorDbtTransformation] {
	return pulumix.Output[[]*FivetranConnectorDbtTransformation]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorDbtTransformationArrayOutput) Index(i pulumi.IntInput) FivetranConnectorDbtTransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FivetranConnectorDbtTransformation {
		return vs[0].([]*FivetranConnectorDbtTransformation)[vs[1].(int)]
	}).(FivetranConnectorDbtTransformationOutput)
}

type FivetranConnectorDbtTransformationMapOutput struct{ *pulumi.OutputState }

func (FivetranConnectorDbtTransformationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorDbtTransformation)(nil)).Elem()
}

func (o FivetranConnectorDbtTransformationMapOutput) ToFivetranConnectorDbtTransformationMapOutput() FivetranConnectorDbtTransformationMapOutput {
	return o
}

func (o FivetranConnectorDbtTransformationMapOutput) ToFivetranConnectorDbtTransformationMapOutputWithContext(ctx context.Context) FivetranConnectorDbtTransformationMapOutput {
	return o
}

func (o FivetranConnectorDbtTransformationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorDbtTransformation] {
	return pulumix.Output[map[string]*FivetranConnectorDbtTransformation]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorDbtTransformationMapOutput) MapIndex(k pulumi.StringInput) FivetranConnectorDbtTransformationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FivetranConnectorDbtTransformation {
		return vs[0].(map[string]*FivetranConnectorDbtTransformation)[vs[1].(string)]
	}).(FivetranConnectorDbtTransformationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorDbtTransformationInput)(nil)).Elem(), &FivetranConnectorDbtTransformation{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorDbtTransformationArrayInput)(nil)).Elem(), FivetranConnectorDbtTransformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorDbtTransformationMapInput)(nil)).Elem(), FivetranConnectorDbtTransformationMap{})
	pulumi.RegisterOutputType(FivetranConnectorDbtTransformationOutput{})
	pulumi.RegisterOutputType(FivetranConnectorDbtTransformationArrayOutput{})
	pulumi.RegisterOutputType(FivetranConnectorDbtTransformationMapOutput{})
}
