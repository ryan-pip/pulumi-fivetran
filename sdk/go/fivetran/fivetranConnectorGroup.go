// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran/internal"
)

// This resource allows you to create, update, and delete groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewFivetranConnectorGroup(ctx, "group", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// 1. To import an existing `fivetran_group` resource into your Terraform state, you need to get **Destination Group ID** on the destination page in your Fivetran dashboard. To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups). 2. Define an empty resource in your `.tf` configurationhcl resource "fivetran_group" "my_imported_fivetran_group" { }
//
// ```sh
//
//	$ pulumi import fivetran:index/fivetranConnectorGroup:FivetranConnectorGroup
//
// Run the `terraform import` command
// ```
//
// ```sh
//
//	$ pulumi import fivetran:index/fivetranConnectorGroup:FivetranConnectorGroup my_imported_fivetran_group {your Destination Group ID}
//
// ```
//
//  4. Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_group.my_imported_fivetran_group' 5. Copy the values and paste them to your `.tf` configuration.
type FivetranConnectorGroup struct {
	pulumi.CustomResourceState

	// The timestamp of when the group was created in your account.
	CreatedAt   pulumi.StringOutput `pulumi:"createdAt"`
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// The name of the group within your account.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewFivetranConnectorGroup registers a new resource with the given unique name, arguments, and options.
func NewFivetranConnectorGroup(ctx *pulumi.Context,
	name string, args *FivetranConnectorGroupArgs, opts ...pulumi.ResourceOption) (*FivetranConnectorGroup, error) {
	if args == nil {
		args = &FivetranConnectorGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FivetranConnectorGroup
	err := ctx.RegisterResource("fivetran:index/fivetranConnectorGroup:FivetranConnectorGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFivetranConnectorGroup gets an existing FivetranConnectorGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFivetranConnectorGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FivetranConnectorGroupState, opts ...pulumi.ResourceOption) (*FivetranConnectorGroup, error) {
	var resource FivetranConnectorGroup
	err := ctx.ReadResource("fivetran:index/fivetranConnectorGroup:FivetranConnectorGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FivetranConnectorGroup resources.
type fivetranConnectorGroupState struct {
	// The timestamp of when the group was created in your account.
	CreatedAt   *string `pulumi:"createdAt"`
	LastUpdated *string `pulumi:"lastUpdated"`
	// The name of the group within your account.
	Name *string `pulumi:"name"`
}

type FivetranConnectorGroupState struct {
	// The timestamp of when the group was created in your account.
	CreatedAt   pulumi.StringPtrInput
	LastUpdated pulumi.StringPtrInput
	// The name of the group within your account.
	Name pulumi.StringPtrInput
}

func (FivetranConnectorGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorGroupState)(nil)).Elem()
}

type fivetranConnectorGroupArgs struct {
	// The name of the group within your account.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a FivetranConnectorGroup resource.
type FivetranConnectorGroupArgs struct {
	// The name of the group within your account.
	Name pulumi.StringPtrInput
}

func (FivetranConnectorGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorGroupArgs)(nil)).Elem()
}

type FivetranConnectorGroupInput interface {
	pulumi.Input

	ToFivetranConnectorGroupOutput() FivetranConnectorGroupOutput
	ToFivetranConnectorGroupOutputWithContext(ctx context.Context) FivetranConnectorGroupOutput
}

func (*FivetranConnectorGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorGroup)(nil)).Elem()
}

func (i *FivetranConnectorGroup) ToFivetranConnectorGroupOutput() FivetranConnectorGroupOutput {
	return i.ToFivetranConnectorGroupOutputWithContext(context.Background())
}

func (i *FivetranConnectorGroup) ToFivetranConnectorGroupOutputWithContext(ctx context.Context) FivetranConnectorGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorGroupOutput)
}

func (i *FivetranConnectorGroup) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorGroup] {
	return pulumix.Output[*FivetranConnectorGroup]{
		OutputState: i.ToFivetranConnectorGroupOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorGroupArrayInput is an input type that accepts FivetranConnectorGroupArray and FivetranConnectorGroupArrayOutput values.
// You can construct a concrete instance of `FivetranConnectorGroupArrayInput` via:
//
//	FivetranConnectorGroupArray{ FivetranConnectorGroupArgs{...} }
type FivetranConnectorGroupArrayInput interface {
	pulumi.Input

	ToFivetranConnectorGroupArrayOutput() FivetranConnectorGroupArrayOutput
	ToFivetranConnectorGroupArrayOutputWithContext(context.Context) FivetranConnectorGroupArrayOutput
}

type FivetranConnectorGroupArray []FivetranConnectorGroupInput

func (FivetranConnectorGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorGroup)(nil)).Elem()
}

func (i FivetranConnectorGroupArray) ToFivetranConnectorGroupArrayOutput() FivetranConnectorGroupArrayOutput {
	return i.ToFivetranConnectorGroupArrayOutputWithContext(context.Background())
}

func (i FivetranConnectorGroupArray) ToFivetranConnectorGroupArrayOutputWithContext(ctx context.Context) FivetranConnectorGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorGroupArrayOutput)
}

func (i FivetranConnectorGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorGroup] {
	return pulumix.Output[[]*FivetranConnectorGroup]{
		OutputState: i.ToFivetranConnectorGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorGroupMapInput is an input type that accepts FivetranConnectorGroupMap and FivetranConnectorGroupMapOutput values.
// You can construct a concrete instance of `FivetranConnectorGroupMapInput` via:
//
//	FivetranConnectorGroupMap{ "key": FivetranConnectorGroupArgs{...} }
type FivetranConnectorGroupMapInput interface {
	pulumi.Input

	ToFivetranConnectorGroupMapOutput() FivetranConnectorGroupMapOutput
	ToFivetranConnectorGroupMapOutputWithContext(context.Context) FivetranConnectorGroupMapOutput
}

type FivetranConnectorGroupMap map[string]FivetranConnectorGroupInput

func (FivetranConnectorGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorGroup)(nil)).Elem()
}

func (i FivetranConnectorGroupMap) ToFivetranConnectorGroupMapOutput() FivetranConnectorGroupMapOutput {
	return i.ToFivetranConnectorGroupMapOutputWithContext(context.Background())
}

func (i FivetranConnectorGroupMap) ToFivetranConnectorGroupMapOutputWithContext(ctx context.Context) FivetranConnectorGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorGroupMapOutput)
}

func (i FivetranConnectorGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorGroup] {
	return pulumix.Output[map[string]*FivetranConnectorGroup]{
		OutputState: i.ToFivetranConnectorGroupMapOutputWithContext(ctx).OutputState,
	}
}

type FivetranConnectorGroupOutput struct{ *pulumi.OutputState }

func (FivetranConnectorGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorGroup)(nil)).Elem()
}

func (o FivetranConnectorGroupOutput) ToFivetranConnectorGroupOutput() FivetranConnectorGroupOutput {
	return o
}

func (o FivetranConnectorGroupOutput) ToFivetranConnectorGroupOutputWithContext(ctx context.Context) FivetranConnectorGroupOutput {
	return o
}

func (o FivetranConnectorGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorGroup] {
	return pulumix.Output[*FivetranConnectorGroup]{
		OutputState: o.OutputState,
	}
}

// The timestamp of when the group was created in your account.
func (o FivetranConnectorGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o FivetranConnectorGroupOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorGroup) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// The name of the group within your account.
func (o FivetranConnectorGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type FivetranConnectorGroupArrayOutput struct{ *pulumi.OutputState }

func (FivetranConnectorGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorGroup)(nil)).Elem()
}

func (o FivetranConnectorGroupArrayOutput) ToFivetranConnectorGroupArrayOutput() FivetranConnectorGroupArrayOutput {
	return o
}

func (o FivetranConnectorGroupArrayOutput) ToFivetranConnectorGroupArrayOutputWithContext(ctx context.Context) FivetranConnectorGroupArrayOutput {
	return o
}

func (o FivetranConnectorGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorGroup] {
	return pulumix.Output[[]*FivetranConnectorGroup]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorGroupArrayOutput) Index(i pulumi.IntInput) FivetranConnectorGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FivetranConnectorGroup {
		return vs[0].([]*FivetranConnectorGroup)[vs[1].(int)]
	}).(FivetranConnectorGroupOutput)
}

type FivetranConnectorGroupMapOutput struct{ *pulumi.OutputState }

func (FivetranConnectorGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorGroup)(nil)).Elem()
}

func (o FivetranConnectorGroupMapOutput) ToFivetranConnectorGroupMapOutput() FivetranConnectorGroupMapOutput {
	return o
}

func (o FivetranConnectorGroupMapOutput) ToFivetranConnectorGroupMapOutputWithContext(ctx context.Context) FivetranConnectorGroupMapOutput {
	return o
}

func (o FivetranConnectorGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorGroup] {
	return pulumix.Output[map[string]*FivetranConnectorGroup]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorGroupMapOutput) MapIndex(k pulumi.StringInput) FivetranConnectorGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FivetranConnectorGroup {
		return vs[0].(map[string]*FivetranConnectorGroup)[vs[1].(string)]
	}).(FivetranConnectorGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorGroupInput)(nil)).Elem(), &FivetranConnectorGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorGroupArrayInput)(nil)).Elem(), FivetranConnectorGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorGroupMapInput)(nil)).Elem(), FivetranConnectorGroupMap{})
	pulumi.RegisterOutputType(FivetranConnectorGroupOutput{})
	pulumi.RegisterOutputType(FivetranConnectorGroupArrayOutput{})
	pulumi.RegisterOutputType(FivetranConnectorGroupMapOutput{})
}
