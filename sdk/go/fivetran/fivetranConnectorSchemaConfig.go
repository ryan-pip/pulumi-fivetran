// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran/internal"
)

// ## ---
//
// page_title: "Resource: FivetranConnectorSchemaConfig"
// ---
//
// # Resource: FivetranConnectorSchemaConfig
//
// This resource allows you to manage the Standard Configuration settings of a connector:
//   - Define the schema change handling settings
//   - Enable and disable schemas, tables, and columns
//
// The resource is in **ALPHA** state. The resource schema and behavior are subject to change without prior notice.
//
// Known issues:
//   - Definition of `syncMode` for table causes infinite drifting changes in plan
//
// ## Usage guide
//
// Note that all configuration settings are aligned to the `schemaChangeHandling` settings,  except the settings explicitly specified in `schema`.
// In `schema`, you only override the default settings defined by the chosen `schemaChangeHandling` option. The default value for the `enabled` attribute is `true` so it can be omitted when you want to enable schemas, tables, or columns.
// The allowed `schemaChangeHandling` options are as follows:
// - `ALLOW_ALL`- all schemas, tables and columns are ENABLED by default. You only need  to explicitly specify DISABLED items or hashed tables
// - `BLOCK_ALL` - all schemas, tables and columns are DISABLED by default, the configuration only specifies ENABLED items
// - `ALLOW_COLUMNS` - all schemas and tables are DISABLED by default, but all columns are ENABLED by default, the configuration specifies ENABLED schemas and tables, and DISABLED columns
//
// Note that system-enabled tables and columns (such as primary and foreign key columns, and [system tables and columns](https://fivetran.com/docs/getting-started/system-columns-and-tables)) are synced regardless of the `schemaChangeHandling` settings and configuration. You can only disable non-locked columns in the system-enabled tables. If the configuration specifies any system tables or locked system table columns as disabled ( `enabled = "false"`), the provider just ignores these statements.
//
// ## Usage examples
//
// ## Import
//
// 1. To import an existing `fivetran_connector_schema_config` resource into your Terraform state, you need to get **Fivetran Connector ID** on the **Setup** tab of the connector page in your Fivetran dashboard. 2. Retrieve all connectors in a particular group using the [fivetran_group_connectors data source](/docs/data-sources/group_connectors). To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups). 3. Define an empty resource in your `.tf` configurationhcl resource "fivetran_connector_schema_config" "my_imported_connector_schema_config" { }
//
// ```sh
//
//	$ pulumi import fivetran:index/fivetranConnectorSchemaConfig:FivetranConnectorSchemaConfig
//
// Run the `terraform import` command
// ```
//
// ```sh
//
//	$ pulumi import fivetran:index/fivetranConnectorSchemaConfig:FivetranConnectorSchemaConfig my_imported_connector_schema_config {your Fivetran Connector ID}
//
// ```
//
// 5.
//
// Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_connector_schema_config.my_imported_connector_schema_config' 6. Copy the values and paste them to your `.tf` configuration.
type FivetranConnectorSchemaConfig struct {
	pulumi.CustomResourceState

	// The unique identifier for the connector within the Fivetran system.
	ConnectorId          pulumi.StringOutput                            `pulumi:"connectorId"`
	SchemaChangeHandling pulumi.StringOutput                            `pulumi:"schemaChangeHandling"`
	Schemas              FivetranConnectorSchemaConfigSchemaArrayOutput `pulumi:"schemas"`
}

// NewFivetranConnectorSchemaConfig registers a new resource with the given unique name, arguments, and options.
func NewFivetranConnectorSchemaConfig(ctx *pulumi.Context,
	name string, args *FivetranConnectorSchemaConfigArgs, opts ...pulumi.ResourceOption) (*FivetranConnectorSchemaConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	if args.SchemaChangeHandling == nil {
		return nil, errors.New("invalid value for required argument 'SchemaChangeHandling'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FivetranConnectorSchemaConfig
	err := ctx.RegisterResource("fivetran:index/fivetranConnectorSchemaConfig:FivetranConnectorSchemaConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFivetranConnectorSchemaConfig gets an existing FivetranConnectorSchemaConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFivetranConnectorSchemaConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FivetranConnectorSchemaConfigState, opts ...pulumi.ResourceOption) (*FivetranConnectorSchemaConfig, error) {
	var resource FivetranConnectorSchemaConfig
	err := ctx.ReadResource("fivetran:index/fivetranConnectorSchemaConfig:FivetranConnectorSchemaConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FivetranConnectorSchemaConfig resources.
type fivetranConnectorSchemaConfigState struct {
	// The unique identifier for the connector within the Fivetran system.
	ConnectorId          *string                               `pulumi:"connectorId"`
	SchemaChangeHandling *string                               `pulumi:"schemaChangeHandling"`
	Schemas              []FivetranConnectorSchemaConfigSchema `pulumi:"schemas"`
}

type FivetranConnectorSchemaConfigState struct {
	// The unique identifier for the connector within the Fivetran system.
	ConnectorId          pulumi.StringPtrInput
	SchemaChangeHandling pulumi.StringPtrInput
	Schemas              FivetranConnectorSchemaConfigSchemaArrayInput
}

func (FivetranConnectorSchemaConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorSchemaConfigState)(nil)).Elem()
}

type fivetranConnectorSchemaConfigArgs struct {
	// The unique identifier for the connector within the Fivetran system.
	ConnectorId          string                                `pulumi:"connectorId"`
	SchemaChangeHandling string                                `pulumi:"schemaChangeHandling"`
	Schemas              []FivetranConnectorSchemaConfigSchema `pulumi:"schemas"`
}

// The set of arguments for constructing a FivetranConnectorSchemaConfig resource.
type FivetranConnectorSchemaConfigArgs struct {
	// The unique identifier for the connector within the Fivetran system.
	ConnectorId          pulumi.StringInput
	SchemaChangeHandling pulumi.StringInput
	Schemas              FivetranConnectorSchemaConfigSchemaArrayInput
}

func (FivetranConnectorSchemaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorSchemaConfigArgs)(nil)).Elem()
}

type FivetranConnectorSchemaConfigInput interface {
	pulumi.Input

	ToFivetranConnectorSchemaConfigOutput() FivetranConnectorSchemaConfigOutput
	ToFivetranConnectorSchemaConfigOutputWithContext(ctx context.Context) FivetranConnectorSchemaConfigOutput
}

func (*FivetranConnectorSchemaConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorSchemaConfig)(nil)).Elem()
}

func (i *FivetranConnectorSchemaConfig) ToFivetranConnectorSchemaConfigOutput() FivetranConnectorSchemaConfigOutput {
	return i.ToFivetranConnectorSchemaConfigOutputWithContext(context.Background())
}

func (i *FivetranConnectorSchemaConfig) ToFivetranConnectorSchemaConfigOutputWithContext(ctx context.Context) FivetranConnectorSchemaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorSchemaConfigOutput)
}

func (i *FivetranConnectorSchemaConfig) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorSchemaConfig] {
	return pulumix.Output[*FivetranConnectorSchemaConfig]{
		OutputState: i.ToFivetranConnectorSchemaConfigOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorSchemaConfigArrayInput is an input type that accepts FivetranConnectorSchemaConfigArray and FivetranConnectorSchemaConfigArrayOutput values.
// You can construct a concrete instance of `FivetranConnectorSchemaConfigArrayInput` via:
//
//	FivetranConnectorSchemaConfigArray{ FivetranConnectorSchemaConfigArgs{...} }
type FivetranConnectorSchemaConfigArrayInput interface {
	pulumi.Input

	ToFivetranConnectorSchemaConfigArrayOutput() FivetranConnectorSchemaConfigArrayOutput
	ToFivetranConnectorSchemaConfigArrayOutputWithContext(context.Context) FivetranConnectorSchemaConfigArrayOutput
}

type FivetranConnectorSchemaConfigArray []FivetranConnectorSchemaConfigInput

func (FivetranConnectorSchemaConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorSchemaConfig)(nil)).Elem()
}

func (i FivetranConnectorSchemaConfigArray) ToFivetranConnectorSchemaConfigArrayOutput() FivetranConnectorSchemaConfigArrayOutput {
	return i.ToFivetranConnectorSchemaConfigArrayOutputWithContext(context.Background())
}

func (i FivetranConnectorSchemaConfigArray) ToFivetranConnectorSchemaConfigArrayOutputWithContext(ctx context.Context) FivetranConnectorSchemaConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorSchemaConfigArrayOutput)
}

func (i FivetranConnectorSchemaConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorSchemaConfig] {
	return pulumix.Output[[]*FivetranConnectorSchemaConfig]{
		OutputState: i.ToFivetranConnectorSchemaConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorSchemaConfigMapInput is an input type that accepts FivetranConnectorSchemaConfigMap and FivetranConnectorSchemaConfigMapOutput values.
// You can construct a concrete instance of `FivetranConnectorSchemaConfigMapInput` via:
//
//	FivetranConnectorSchemaConfigMap{ "key": FivetranConnectorSchemaConfigArgs{...} }
type FivetranConnectorSchemaConfigMapInput interface {
	pulumi.Input

	ToFivetranConnectorSchemaConfigMapOutput() FivetranConnectorSchemaConfigMapOutput
	ToFivetranConnectorSchemaConfigMapOutputWithContext(context.Context) FivetranConnectorSchemaConfigMapOutput
}

type FivetranConnectorSchemaConfigMap map[string]FivetranConnectorSchemaConfigInput

func (FivetranConnectorSchemaConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorSchemaConfig)(nil)).Elem()
}

func (i FivetranConnectorSchemaConfigMap) ToFivetranConnectorSchemaConfigMapOutput() FivetranConnectorSchemaConfigMapOutput {
	return i.ToFivetranConnectorSchemaConfigMapOutputWithContext(context.Background())
}

func (i FivetranConnectorSchemaConfigMap) ToFivetranConnectorSchemaConfigMapOutputWithContext(ctx context.Context) FivetranConnectorSchemaConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorSchemaConfigMapOutput)
}

func (i FivetranConnectorSchemaConfigMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorSchemaConfig] {
	return pulumix.Output[map[string]*FivetranConnectorSchemaConfig]{
		OutputState: i.ToFivetranConnectorSchemaConfigMapOutputWithContext(ctx).OutputState,
	}
}

type FivetranConnectorSchemaConfigOutput struct{ *pulumi.OutputState }

func (FivetranConnectorSchemaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorSchemaConfig)(nil)).Elem()
}

func (o FivetranConnectorSchemaConfigOutput) ToFivetranConnectorSchemaConfigOutput() FivetranConnectorSchemaConfigOutput {
	return o
}

func (o FivetranConnectorSchemaConfigOutput) ToFivetranConnectorSchemaConfigOutputWithContext(ctx context.Context) FivetranConnectorSchemaConfigOutput {
	return o
}

func (o FivetranConnectorSchemaConfigOutput) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorSchemaConfig] {
	return pulumix.Output[*FivetranConnectorSchemaConfig]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the connector within the Fivetran system.
func (o FivetranConnectorSchemaConfigOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorSchemaConfig) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

func (o FivetranConnectorSchemaConfigOutput) SchemaChangeHandling() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorSchemaConfig) pulumi.StringOutput { return v.SchemaChangeHandling }).(pulumi.StringOutput)
}

func (o FivetranConnectorSchemaConfigOutput) Schemas() FivetranConnectorSchemaConfigSchemaArrayOutput {
	return o.ApplyT(func(v *FivetranConnectorSchemaConfig) FivetranConnectorSchemaConfigSchemaArrayOutput {
		return v.Schemas
	}).(FivetranConnectorSchemaConfigSchemaArrayOutput)
}

type FivetranConnectorSchemaConfigArrayOutput struct{ *pulumi.OutputState }

func (FivetranConnectorSchemaConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorSchemaConfig)(nil)).Elem()
}

func (o FivetranConnectorSchemaConfigArrayOutput) ToFivetranConnectorSchemaConfigArrayOutput() FivetranConnectorSchemaConfigArrayOutput {
	return o
}

func (o FivetranConnectorSchemaConfigArrayOutput) ToFivetranConnectorSchemaConfigArrayOutputWithContext(ctx context.Context) FivetranConnectorSchemaConfigArrayOutput {
	return o
}

func (o FivetranConnectorSchemaConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorSchemaConfig] {
	return pulumix.Output[[]*FivetranConnectorSchemaConfig]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorSchemaConfigArrayOutput) Index(i pulumi.IntInput) FivetranConnectorSchemaConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FivetranConnectorSchemaConfig {
		return vs[0].([]*FivetranConnectorSchemaConfig)[vs[1].(int)]
	}).(FivetranConnectorSchemaConfigOutput)
}

type FivetranConnectorSchemaConfigMapOutput struct{ *pulumi.OutputState }

func (FivetranConnectorSchemaConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorSchemaConfig)(nil)).Elem()
}

func (o FivetranConnectorSchemaConfigMapOutput) ToFivetranConnectorSchemaConfigMapOutput() FivetranConnectorSchemaConfigMapOutput {
	return o
}

func (o FivetranConnectorSchemaConfigMapOutput) ToFivetranConnectorSchemaConfigMapOutputWithContext(ctx context.Context) FivetranConnectorSchemaConfigMapOutput {
	return o
}

func (o FivetranConnectorSchemaConfigMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorSchemaConfig] {
	return pulumix.Output[map[string]*FivetranConnectorSchemaConfig]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorSchemaConfigMapOutput) MapIndex(k pulumi.StringInput) FivetranConnectorSchemaConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FivetranConnectorSchemaConfig {
		return vs[0].(map[string]*FivetranConnectorSchemaConfig)[vs[1].(string)]
	}).(FivetranConnectorSchemaConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorSchemaConfigInput)(nil)).Elem(), &FivetranConnectorSchemaConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorSchemaConfigArrayInput)(nil)).Elem(), FivetranConnectorSchemaConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorSchemaConfigMapInput)(nil)).Elem(), FivetranConnectorSchemaConfigMap{})
	pulumi.RegisterOutputType(FivetranConnectorSchemaConfigOutput{})
	pulumi.RegisterOutputType(FivetranConnectorSchemaConfigArrayOutput{})
	pulumi.RegisterOutputType(FivetranConnectorSchemaConfigMapOutput{})
}
