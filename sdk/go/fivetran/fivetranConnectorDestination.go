// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran/internal"
)

// ## Import
//
// 1. To import an existing `fivetran_destination` resource into your Terraform state, you need to get **Destination Group ID** on the destination page in your Fivetran dashboard. To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups). 2. Define an empty resource in your `.tf` configurationhcl resource "fivetran_destination" "my_imported_destination" { }
//
// ```sh
//
//	$ pulumi import fivetran:index/fivetranConnectorDestination:FivetranConnectorDestination
//
// Run the `terraform import` command with the following parameters
// ```
//
// ```sh
//
//	$ pulumi import fivetran:index/fivetranConnectorDestination:FivetranConnectorDestination my_imported_destination {your Destination Group ID}
//
// ```
//
//  4. Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_destination.my_imported_destination' 5. Copy the values and paste them to your `.tf` configuration. -> The `config` object in the state contains all properties defined in the schema. You need to remove properties from the `config` that are not related to destinations. See the [Fivetran REST API documentation](https://fivetran.com/docs/rest-api/destinations/config) for reference to find the properties you need to keep in the `config` section.
type FivetranConnectorDestination struct {
	pulumi.CustomResourceState

	Config FivetranConnectorDestinationConfigOutput `pulumi:"config"`
	// The unique identifier for the Group within the Fivetran system.
	GroupId     pulumi.StringOutput `pulumi:"groupId"`
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// Data processing location. This is where Fivetran will operate and run computation on data.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests pulumi.BoolPtrOutput `pulumi:"runSetupTests"`
	// The destination type name within the Fivetran system.
	Service pulumi.StringOutput `pulumi:"service"`
	// Destination setup status
	SetupStatus pulumi.StringOutput `pulumi:"setupStatus"`
	// Determines the time zone for the Fivetran sync schedule.
	TimeZoneOffset pulumi.StringOutput `pulumi:"timeZoneOffset"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates pulumi.BoolPtrOutput `pulumi:"trustCertificates"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints pulumi.BoolPtrOutput `pulumi:"trustFingerprints"`
}

// NewFivetranConnectorDestination registers a new resource with the given unique name, arguments, and options.
func NewFivetranConnectorDestination(ctx *pulumi.Context,
	name string, args *FivetranConnectorDestinationArgs, opts ...pulumi.ResourceOption) (*FivetranConnectorDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.TimeZoneOffset == nil {
		return nil, errors.New("invalid value for required argument 'TimeZoneOffset'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FivetranConnectorDestination
	err := ctx.RegisterResource("fivetran:index/fivetranConnectorDestination:FivetranConnectorDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFivetranConnectorDestination gets an existing FivetranConnectorDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFivetranConnectorDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FivetranConnectorDestinationState, opts ...pulumi.ResourceOption) (*FivetranConnectorDestination, error) {
	var resource FivetranConnectorDestination
	err := ctx.ReadResource("fivetran:index/fivetranConnectorDestination:FivetranConnectorDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FivetranConnectorDestination resources.
type fivetranConnectorDestinationState struct {
	Config *FivetranConnectorDestinationConfig `pulumi:"config"`
	// The unique identifier for the Group within the Fivetran system.
	GroupId     *string `pulumi:"groupId"`
	LastUpdated *string `pulumi:"lastUpdated"`
	// Data processing location. This is where Fivetran will operate and run computation on data.
	Region *string `pulumi:"region"`
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests *bool `pulumi:"runSetupTests"`
	// The destination type name within the Fivetran system.
	Service *string `pulumi:"service"`
	// Destination setup status
	SetupStatus *string `pulumi:"setupStatus"`
	// Determines the time zone for the Fivetran sync schedule.
	TimeZoneOffset *string `pulumi:"timeZoneOffset"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates *bool `pulumi:"trustCertificates"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints *bool `pulumi:"trustFingerprints"`
}

type FivetranConnectorDestinationState struct {
	Config FivetranConnectorDestinationConfigPtrInput
	// The unique identifier for the Group within the Fivetran system.
	GroupId     pulumi.StringPtrInput
	LastUpdated pulumi.StringPtrInput
	// Data processing location. This is where Fivetran will operate and run computation on data.
	Region pulumi.StringPtrInput
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests pulumi.BoolPtrInput
	// The destination type name within the Fivetran system.
	Service pulumi.StringPtrInput
	// Destination setup status
	SetupStatus pulumi.StringPtrInput
	// Determines the time zone for the Fivetran sync schedule.
	TimeZoneOffset pulumi.StringPtrInput
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates pulumi.BoolPtrInput
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints pulumi.BoolPtrInput
}

func (FivetranConnectorDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorDestinationState)(nil)).Elem()
}

type fivetranConnectorDestinationArgs struct {
	Config FivetranConnectorDestinationConfig `pulumi:"config"`
	// The unique identifier for the Group within the Fivetran system.
	GroupId string `pulumi:"groupId"`
	// Data processing location. This is where Fivetran will operate and run computation on data.
	Region string `pulumi:"region"`
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests *bool `pulumi:"runSetupTests"`
	// The destination type name within the Fivetran system.
	Service string `pulumi:"service"`
	// Determines the time zone for the Fivetran sync schedule.
	TimeZoneOffset string `pulumi:"timeZoneOffset"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates *bool `pulumi:"trustCertificates"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints *bool `pulumi:"trustFingerprints"`
}

// The set of arguments for constructing a FivetranConnectorDestination resource.
type FivetranConnectorDestinationArgs struct {
	Config FivetranConnectorDestinationConfigInput
	// The unique identifier for the Group within the Fivetran system.
	GroupId pulumi.StringInput
	// Data processing location. This is where Fivetran will operate and run computation on data.
	Region pulumi.StringInput
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunSetupTests pulumi.BoolPtrInput
	// The destination type name within the Fivetran system.
	Service pulumi.StringInput
	// Determines the time zone for the Fivetran sync schedule.
	TimeZoneOffset pulumi.StringInput
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates pulumi.BoolPtrInput
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints pulumi.BoolPtrInput
}

func (FivetranConnectorDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorDestinationArgs)(nil)).Elem()
}

type FivetranConnectorDestinationInput interface {
	pulumi.Input

	ToFivetranConnectorDestinationOutput() FivetranConnectorDestinationOutput
	ToFivetranConnectorDestinationOutputWithContext(ctx context.Context) FivetranConnectorDestinationOutput
}

func (*FivetranConnectorDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorDestination)(nil)).Elem()
}

func (i *FivetranConnectorDestination) ToFivetranConnectorDestinationOutput() FivetranConnectorDestinationOutput {
	return i.ToFivetranConnectorDestinationOutputWithContext(context.Background())
}

func (i *FivetranConnectorDestination) ToFivetranConnectorDestinationOutputWithContext(ctx context.Context) FivetranConnectorDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorDestinationOutput)
}

func (i *FivetranConnectorDestination) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorDestination] {
	return pulumix.Output[*FivetranConnectorDestination]{
		OutputState: i.ToFivetranConnectorDestinationOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorDestinationArrayInput is an input type that accepts FivetranConnectorDestinationArray and FivetranConnectorDestinationArrayOutput values.
// You can construct a concrete instance of `FivetranConnectorDestinationArrayInput` via:
//
//	FivetranConnectorDestinationArray{ FivetranConnectorDestinationArgs{...} }
type FivetranConnectorDestinationArrayInput interface {
	pulumi.Input

	ToFivetranConnectorDestinationArrayOutput() FivetranConnectorDestinationArrayOutput
	ToFivetranConnectorDestinationArrayOutputWithContext(context.Context) FivetranConnectorDestinationArrayOutput
}

type FivetranConnectorDestinationArray []FivetranConnectorDestinationInput

func (FivetranConnectorDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorDestination)(nil)).Elem()
}

func (i FivetranConnectorDestinationArray) ToFivetranConnectorDestinationArrayOutput() FivetranConnectorDestinationArrayOutput {
	return i.ToFivetranConnectorDestinationArrayOutputWithContext(context.Background())
}

func (i FivetranConnectorDestinationArray) ToFivetranConnectorDestinationArrayOutputWithContext(ctx context.Context) FivetranConnectorDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorDestinationArrayOutput)
}

func (i FivetranConnectorDestinationArray) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorDestination] {
	return pulumix.Output[[]*FivetranConnectorDestination]{
		OutputState: i.ToFivetranConnectorDestinationArrayOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorDestinationMapInput is an input type that accepts FivetranConnectorDestinationMap and FivetranConnectorDestinationMapOutput values.
// You can construct a concrete instance of `FivetranConnectorDestinationMapInput` via:
//
//	FivetranConnectorDestinationMap{ "key": FivetranConnectorDestinationArgs{...} }
type FivetranConnectorDestinationMapInput interface {
	pulumi.Input

	ToFivetranConnectorDestinationMapOutput() FivetranConnectorDestinationMapOutput
	ToFivetranConnectorDestinationMapOutputWithContext(context.Context) FivetranConnectorDestinationMapOutput
}

type FivetranConnectorDestinationMap map[string]FivetranConnectorDestinationInput

func (FivetranConnectorDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorDestination)(nil)).Elem()
}

func (i FivetranConnectorDestinationMap) ToFivetranConnectorDestinationMapOutput() FivetranConnectorDestinationMapOutput {
	return i.ToFivetranConnectorDestinationMapOutputWithContext(context.Background())
}

func (i FivetranConnectorDestinationMap) ToFivetranConnectorDestinationMapOutputWithContext(ctx context.Context) FivetranConnectorDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorDestinationMapOutput)
}

func (i FivetranConnectorDestinationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorDestination] {
	return pulumix.Output[map[string]*FivetranConnectorDestination]{
		OutputState: i.ToFivetranConnectorDestinationMapOutputWithContext(ctx).OutputState,
	}
}

type FivetranConnectorDestinationOutput struct{ *pulumi.OutputState }

func (FivetranConnectorDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorDestination)(nil)).Elem()
}

func (o FivetranConnectorDestinationOutput) ToFivetranConnectorDestinationOutput() FivetranConnectorDestinationOutput {
	return o
}

func (o FivetranConnectorDestinationOutput) ToFivetranConnectorDestinationOutputWithContext(ctx context.Context) FivetranConnectorDestinationOutput {
	return o
}

func (o FivetranConnectorDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorDestination] {
	return pulumix.Output[*FivetranConnectorDestination]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorDestinationOutput) Config() FivetranConnectorDestinationConfigOutput {
	return o.ApplyT(func(v *FivetranConnectorDestination) FivetranConnectorDestinationConfigOutput { return v.Config }).(FivetranConnectorDestinationConfigOutput)
}

// The unique identifier for the Group within the Fivetran system.
func (o FivetranConnectorDestinationOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDestination) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o FivetranConnectorDestinationOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDestination) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Data processing location. This is where Fivetran will operate and run computation on data.
func (o FivetranConnectorDestinationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDestination) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies whether the setup tests should be run automatically. The default value is TRUE.
func (o FivetranConnectorDestinationOutput) RunSetupTests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FivetranConnectorDestination) pulumi.BoolPtrOutput { return v.RunSetupTests }).(pulumi.BoolPtrOutput)
}

// The destination type name within the Fivetran system.
func (o FivetranConnectorDestinationOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDestination) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// Destination setup status
func (o FivetranConnectorDestinationOutput) SetupStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDestination) pulumi.StringOutput { return v.SetupStatus }).(pulumi.StringOutput)
}

// Determines the time zone for the Fivetran sync schedule.
func (o FivetranConnectorDestinationOutput) TimeZoneOffset() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDestination) pulumi.StringOutput { return v.TimeZoneOffset }).(pulumi.StringOutput)
}

// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
func (o FivetranConnectorDestinationOutput) TrustCertificates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FivetranConnectorDestination) pulumi.BoolPtrOutput { return v.TrustCertificates }).(pulumi.BoolPtrOutput)
}

// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
func (o FivetranConnectorDestinationOutput) TrustFingerprints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FivetranConnectorDestination) pulumi.BoolPtrOutput { return v.TrustFingerprints }).(pulumi.BoolPtrOutput)
}

type FivetranConnectorDestinationArrayOutput struct{ *pulumi.OutputState }

func (FivetranConnectorDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorDestination)(nil)).Elem()
}

func (o FivetranConnectorDestinationArrayOutput) ToFivetranConnectorDestinationArrayOutput() FivetranConnectorDestinationArrayOutput {
	return o
}

func (o FivetranConnectorDestinationArrayOutput) ToFivetranConnectorDestinationArrayOutputWithContext(ctx context.Context) FivetranConnectorDestinationArrayOutput {
	return o
}

func (o FivetranConnectorDestinationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorDestination] {
	return pulumix.Output[[]*FivetranConnectorDestination]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorDestinationArrayOutput) Index(i pulumi.IntInput) FivetranConnectorDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FivetranConnectorDestination {
		return vs[0].([]*FivetranConnectorDestination)[vs[1].(int)]
	}).(FivetranConnectorDestinationOutput)
}

type FivetranConnectorDestinationMapOutput struct{ *pulumi.OutputState }

func (FivetranConnectorDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorDestination)(nil)).Elem()
}

func (o FivetranConnectorDestinationMapOutput) ToFivetranConnectorDestinationMapOutput() FivetranConnectorDestinationMapOutput {
	return o
}

func (o FivetranConnectorDestinationMapOutput) ToFivetranConnectorDestinationMapOutputWithContext(ctx context.Context) FivetranConnectorDestinationMapOutput {
	return o
}

func (o FivetranConnectorDestinationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorDestination] {
	return pulumix.Output[map[string]*FivetranConnectorDestination]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorDestinationMapOutput) MapIndex(k pulumi.StringInput) FivetranConnectorDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FivetranConnectorDestination {
		return vs[0].(map[string]*FivetranConnectorDestination)[vs[1].(string)]
	}).(FivetranConnectorDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorDestinationInput)(nil)).Elem(), &FivetranConnectorDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorDestinationArrayInput)(nil)).Elem(), FivetranConnectorDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorDestinationMapInput)(nil)).Elem(), FivetranConnectorDestinationMap{})
	pulumi.RegisterOutputType(FivetranConnectorDestinationOutput{})
	pulumi.RegisterOutputType(FivetranConnectorDestinationArrayOutput{})
	pulumi.RegisterOutputType(FivetranConnectorDestinationMapOutput{})
}
