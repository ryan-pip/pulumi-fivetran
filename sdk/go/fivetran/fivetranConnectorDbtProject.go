// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran/internal"
)

// Resource is in ALPHA state.
//
// This resource allows you to add, manage and delete dbt Projects in your account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-fivetran/sdk/go/fivetran"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewFivetranConnectorDbtProject(ctx, "project", &fivetran.FivetranConnectorDbtProjectArgs{
//				DbtVersion:    pulumi.String("1.4.1"),
//				DefaultSchema: pulumi.String("default_schema"),
//				EnvironmentVars: pulumi.StringArray{
//					pulumi.String("environment_var=value"),
//				},
//				GroupId: pulumi.String("group_id"),
//				ProjectConfig: &fivetran.FivetranConnectorDbtProjectProjectConfigArgs{
//					FolderPath:   pulumi.String("/dbt/project/folder/path"),
//					GitBranch:    pulumi.String("main"),
//					GitRemoteUrl: pulumi.String("your_git_remote_url"),
//				},
//				TargetName: pulumi.String("target_name"),
//				Threads:    pulumi.Int(8),
//				Type:       pulumi.String("GIT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// 1. To import an existing `fivetran_dbt_project` resource into your Terraform state, you need to get **Dbt Project ID** via API call `GET https://api.fivetran.com/v1/dbt/projects` to retrieve available projects. 2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/dbt/projects/{project-id}` to ensure that this is the project you want to import. 3. Define an empty resource in your `.tf` configurationhcl resource "fivetran_dbt_project" "my_imported_fivetran_dbt_project" { }
//
// ```sh
//
//	$ pulumi import fivetran:index/fivetranConnectorDbtProject:FivetranConnectorDbtProject
//
// Run the `terraform import` command
// ```
//
// ```sh
//
//	$ pulumi import fivetran:index/fivetranConnectorDbtProject:FivetranConnectorDbtProject my_imported_fivetran_dbt_project {Dbt Project ID}
//
// ```
//
//  4. Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_dbt_project.my_imported_fivetran_dbt_project' 5. Copy the values and paste them to your `.tf` configuration.
type FivetranConnectorDbtProject struct {
	pulumi.CustomResourceState

	// The timestamp of the dbt Project creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById pulumi.StringOutput `pulumi:"createdById"`
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion pulumi.StringOutput `pulumi:"dbtVersion"`
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema pulumi.StringOutput `pulumi:"defaultSchema"`
	// Should resource wait for project to finish initialization. Default value: true.
	EnsureReadiness pulumi.BoolPtrOutput     `pulumi:"ensureReadiness"`
	EnvironmentVars pulumi.StringArrayOutput `pulumi:"environmentVars"`
	// The unique identifier for the group within the Fivetran system.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The collection of dbt Models.
	Models FivetranConnectorDbtProjectModelArrayOutput `pulumi:"models"`
	// Type specific dbt Project configuration parameters.
	ProjectConfig FivetranConnectorDbtProjectProjectConfigOutput `pulumi:"projectConfig"`
	// Public key to grant Fivetran SSH access to git repository.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// Status of dbt Project (NOT_READY, READY, ERROR).
	Status pulumi.StringOutput `pulumi:"status"`
	// Target name to set or override the value from the deployment.yaml
	TargetName pulumi.StringPtrOutput `pulumi:"targetName"`
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads pulumi.IntPtrOutput `pulumi:"threads"`
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFivetranConnectorDbtProject registers a new resource with the given unique name, arguments, and options.
func NewFivetranConnectorDbtProject(ctx *pulumi.Context,
	name string, args *FivetranConnectorDbtProjectArgs, opts ...pulumi.ResourceOption) (*FivetranConnectorDbtProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbtVersion == nil {
		return nil, errors.New("invalid value for required argument 'DbtVersion'")
	}
	if args.DefaultSchema == nil {
		return nil, errors.New("invalid value for required argument 'DefaultSchema'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.ProjectConfig == nil {
		return nil, errors.New("invalid value for required argument 'ProjectConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FivetranConnectorDbtProject
	err := ctx.RegisterResource("fivetran:index/fivetranConnectorDbtProject:FivetranConnectorDbtProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFivetranConnectorDbtProject gets an existing FivetranConnectorDbtProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFivetranConnectorDbtProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FivetranConnectorDbtProjectState, opts ...pulumi.ResourceOption) (*FivetranConnectorDbtProject, error) {
	var resource FivetranConnectorDbtProject
	err := ctx.ReadResource("fivetran:index/fivetranConnectorDbtProject:FivetranConnectorDbtProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FivetranConnectorDbtProject resources.
type fivetranConnectorDbtProjectState struct {
	// The timestamp of the dbt Project creation.
	CreatedAt *string `pulumi:"createdAt"`
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById *string `pulumi:"createdById"`
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion *string `pulumi:"dbtVersion"`
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema *string `pulumi:"defaultSchema"`
	// Should resource wait for project to finish initialization. Default value: true.
	EnsureReadiness *bool    `pulumi:"ensureReadiness"`
	EnvironmentVars []string `pulumi:"environmentVars"`
	// The unique identifier for the group within the Fivetran system.
	GroupId *string `pulumi:"groupId"`
	// The collection of dbt Models.
	Models []FivetranConnectorDbtProjectModel `pulumi:"models"`
	// Type specific dbt Project configuration parameters.
	ProjectConfig *FivetranConnectorDbtProjectProjectConfig `pulumi:"projectConfig"`
	// Public key to grant Fivetran SSH access to git repository.
	PublicKey *string `pulumi:"publicKey"`
	// Status of dbt Project (NOT_READY, READY, ERROR).
	Status *string `pulumi:"status"`
	// Target name to set or override the value from the deployment.yaml
	TargetName *string `pulumi:"targetName"`
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads *int `pulumi:"threads"`
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type *string `pulumi:"type"`
}

type FivetranConnectorDbtProjectState struct {
	// The timestamp of the dbt Project creation.
	CreatedAt pulumi.StringPtrInput
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById pulumi.StringPtrInput
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion pulumi.StringPtrInput
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema pulumi.StringPtrInput
	// Should resource wait for project to finish initialization. Default value: true.
	EnsureReadiness pulumi.BoolPtrInput
	EnvironmentVars pulumi.StringArrayInput
	// The unique identifier for the group within the Fivetran system.
	GroupId pulumi.StringPtrInput
	// The collection of dbt Models.
	Models FivetranConnectorDbtProjectModelArrayInput
	// Type specific dbt Project configuration parameters.
	ProjectConfig FivetranConnectorDbtProjectProjectConfigPtrInput
	// Public key to grant Fivetran SSH access to git repository.
	PublicKey pulumi.StringPtrInput
	// Status of dbt Project (NOT_READY, READY, ERROR).
	Status pulumi.StringPtrInput
	// Target name to set or override the value from the deployment.yaml
	TargetName pulumi.StringPtrInput
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads pulumi.IntPtrInput
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type pulumi.StringPtrInput
}

func (FivetranConnectorDbtProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorDbtProjectState)(nil)).Elem()
}

type fivetranConnectorDbtProjectArgs struct {
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion string `pulumi:"dbtVersion"`
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema string `pulumi:"defaultSchema"`
	// Should resource wait for project to finish initialization. Default value: true.
	EnsureReadiness *bool    `pulumi:"ensureReadiness"`
	EnvironmentVars []string `pulumi:"environmentVars"`
	// The unique identifier for the group within the Fivetran system.
	GroupId string `pulumi:"groupId"`
	// The collection of dbt Models.
	Models []FivetranConnectorDbtProjectModel `pulumi:"models"`
	// Type specific dbt Project configuration parameters.
	ProjectConfig FivetranConnectorDbtProjectProjectConfig `pulumi:"projectConfig"`
	// Target name to set or override the value from the deployment.yaml
	TargetName *string `pulumi:"targetName"`
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads *int `pulumi:"threads"`
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a FivetranConnectorDbtProject resource.
type FivetranConnectorDbtProjectArgs struct {
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion pulumi.StringInput
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema pulumi.StringInput
	// Should resource wait for project to finish initialization. Default value: true.
	EnsureReadiness pulumi.BoolPtrInput
	EnvironmentVars pulumi.StringArrayInput
	// The unique identifier for the group within the Fivetran system.
	GroupId pulumi.StringInput
	// The collection of dbt Models.
	Models FivetranConnectorDbtProjectModelArrayInput
	// Type specific dbt Project configuration parameters.
	ProjectConfig FivetranConnectorDbtProjectProjectConfigInput
	// Target name to set or override the value from the deployment.yaml
	TargetName pulumi.StringPtrInput
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads pulumi.IntPtrInput
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type pulumi.StringPtrInput
}

func (FivetranConnectorDbtProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fivetranConnectorDbtProjectArgs)(nil)).Elem()
}

type FivetranConnectorDbtProjectInput interface {
	pulumi.Input

	ToFivetranConnectorDbtProjectOutput() FivetranConnectorDbtProjectOutput
	ToFivetranConnectorDbtProjectOutputWithContext(ctx context.Context) FivetranConnectorDbtProjectOutput
}

func (*FivetranConnectorDbtProject) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorDbtProject)(nil)).Elem()
}

func (i *FivetranConnectorDbtProject) ToFivetranConnectorDbtProjectOutput() FivetranConnectorDbtProjectOutput {
	return i.ToFivetranConnectorDbtProjectOutputWithContext(context.Background())
}

func (i *FivetranConnectorDbtProject) ToFivetranConnectorDbtProjectOutputWithContext(ctx context.Context) FivetranConnectorDbtProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorDbtProjectOutput)
}

func (i *FivetranConnectorDbtProject) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorDbtProject] {
	return pulumix.Output[*FivetranConnectorDbtProject]{
		OutputState: i.ToFivetranConnectorDbtProjectOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorDbtProjectArrayInput is an input type that accepts FivetranConnectorDbtProjectArray and FivetranConnectorDbtProjectArrayOutput values.
// You can construct a concrete instance of `FivetranConnectorDbtProjectArrayInput` via:
//
//	FivetranConnectorDbtProjectArray{ FivetranConnectorDbtProjectArgs{...} }
type FivetranConnectorDbtProjectArrayInput interface {
	pulumi.Input

	ToFivetranConnectorDbtProjectArrayOutput() FivetranConnectorDbtProjectArrayOutput
	ToFivetranConnectorDbtProjectArrayOutputWithContext(context.Context) FivetranConnectorDbtProjectArrayOutput
}

type FivetranConnectorDbtProjectArray []FivetranConnectorDbtProjectInput

func (FivetranConnectorDbtProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorDbtProject)(nil)).Elem()
}

func (i FivetranConnectorDbtProjectArray) ToFivetranConnectorDbtProjectArrayOutput() FivetranConnectorDbtProjectArrayOutput {
	return i.ToFivetranConnectorDbtProjectArrayOutputWithContext(context.Background())
}

func (i FivetranConnectorDbtProjectArray) ToFivetranConnectorDbtProjectArrayOutputWithContext(ctx context.Context) FivetranConnectorDbtProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorDbtProjectArrayOutput)
}

func (i FivetranConnectorDbtProjectArray) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorDbtProject] {
	return pulumix.Output[[]*FivetranConnectorDbtProject]{
		OutputState: i.ToFivetranConnectorDbtProjectArrayOutputWithContext(ctx).OutputState,
	}
}

// FivetranConnectorDbtProjectMapInput is an input type that accepts FivetranConnectorDbtProjectMap and FivetranConnectorDbtProjectMapOutput values.
// You can construct a concrete instance of `FivetranConnectorDbtProjectMapInput` via:
//
//	FivetranConnectorDbtProjectMap{ "key": FivetranConnectorDbtProjectArgs{...} }
type FivetranConnectorDbtProjectMapInput interface {
	pulumi.Input

	ToFivetranConnectorDbtProjectMapOutput() FivetranConnectorDbtProjectMapOutput
	ToFivetranConnectorDbtProjectMapOutputWithContext(context.Context) FivetranConnectorDbtProjectMapOutput
}

type FivetranConnectorDbtProjectMap map[string]FivetranConnectorDbtProjectInput

func (FivetranConnectorDbtProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorDbtProject)(nil)).Elem()
}

func (i FivetranConnectorDbtProjectMap) ToFivetranConnectorDbtProjectMapOutput() FivetranConnectorDbtProjectMapOutput {
	return i.ToFivetranConnectorDbtProjectMapOutputWithContext(context.Background())
}

func (i FivetranConnectorDbtProjectMap) ToFivetranConnectorDbtProjectMapOutputWithContext(ctx context.Context) FivetranConnectorDbtProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FivetranConnectorDbtProjectMapOutput)
}

func (i FivetranConnectorDbtProjectMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorDbtProject] {
	return pulumix.Output[map[string]*FivetranConnectorDbtProject]{
		OutputState: i.ToFivetranConnectorDbtProjectMapOutputWithContext(ctx).OutputState,
	}
}

type FivetranConnectorDbtProjectOutput struct{ *pulumi.OutputState }

func (FivetranConnectorDbtProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FivetranConnectorDbtProject)(nil)).Elem()
}

func (o FivetranConnectorDbtProjectOutput) ToFivetranConnectorDbtProjectOutput() FivetranConnectorDbtProjectOutput {
	return o
}

func (o FivetranConnectorDbtProjectOutput) ToFivetranConnectorDbtProjectOutputWithContext(ctx context.Context) FivetranConnectorDbtProjectOutput {
	return o
}

func (o FivetranConnectorDbtProjectOutput) ToOutput(ctx context.Context) pulumix.Output[*FivetranConnectorDbtProject] {
	return pulumix.Output[*FivetranConnectorDbtProject]{
		OutputState: o.OutputState,
	}
}

// The timestamp of the dbt Project creation.
func (o FivetranConnectorDbtProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique identifier for the User within the Fivetran system who created the dbt Project.
func (o FivetranConnectorDbtProjectOutput) CreatedById() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.StringOutput { return v.CreatedById }).(pulumi.StringOutput)
}

// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
func (o FivetranConnectorDbtProjectOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.StringOutput { return v.DbtVersion }).(pulumi.StringOutput)
}

// Default schema in destination. This production schema will contain your transformed data.
func (o FivetranConnectorDbtProjectOutput) DefaultSchema() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.StringOutput { return v.DefaultSchema }).(pulumi.StringOutput)
}

// Should resource wait for project to finish initialization. Default value: true.
func (o FivetranConnectorDbtProjectOutput) EnsureReadiness() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.BoolPtrOutput { return v.EnsureReadiness }).(pulumi.BoolPtrOutput)
}

func (o FivetranConnectorDbtProjectOutput) EnvironmentVars() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.StringArrayOutput { return v.EnvironmentVars }).(pulumi.StringArrayOutput)
}

// The unique identifier for the group within the Fivetran system.
func (o FivetranConnectorDbtProjectOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The collection of dbt Models.
func (o FivetranConnectorDbtProjectOutput) Models() FivetranConnectorDbtProjectModelArrayOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) FivetranConnectorDbtProjectModelArrayOutput { return v.Models }).(FivetranConnectorDbtProjectModelArrayOutput)
}

// Type specific dbt Project configuration parameters.
func (o FivetranConnectorDbtProjectOutput) ProjectConfig() FivetranConnectorDbtProjectProjectConfigOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) FivetranConnectorDbtProjectProjectConfigOutput {
		return v.ProjectConfig
	}).(FivetranConnectorDbtProjectProjectConfigOutput)
}

// Public key to grant Fivetran SSH access to git repository.
func (o FivetranConnectorDbtProjectOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// Status of dbt Project (NOT_READY, READY, ERROR).
func (o FivetranConnectorDbtProjectOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Target name to set or override the value from the deployment.yaml
func (o FivetranConnectorDbtProjectOutput) TargetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.StringPtrOutput { return v.TargetName }).(pulumi.StringPtrOutput)
}

// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
func (o FivetranConnectorDbtProjectOutput) Threads() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.IntPtrOutput { return v.Threads }).(pulumi.IntPtrOutput)
}

// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
func (o FivetranConnectorDbtProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FivetranConnectorDbtProject) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type FivetranConnectorDbtProjectArrayOutput struct{ *pulumi.OutputState }

func (FivetranConnectorDbtProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FivetranConnectorDbtProject)(nil)).Elem()
}

func (o FivetranConnectorDbtProjectArrayOutput) ToFivetranConnectorDbtProjectArrayOutput() FivetranConnectorDbtProjectArrayOutput {
	return o
}

func (o FivetranConnectorDbtProjectArrayOutput) ToFivetranConnectorDbtProjectArrayOutputWithContext(ctx context.Context) FivetranConnectorDbtProjectArrayOutput {
	return o
}

func (o FivetranConnectorDbtProjectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FivetranConnectorDbtProject] {
	return pulumix.Output[[]*FivetranConnectorDbtProject]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorDbtProjectArrayOutput) Index(i pulumi.IntInput) FivetranConnectorDbtProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FivetranConnectorDbtProject {
		return vs[0].([]*FivetranConnectorDbtProject)[vs[1].(int)]
	}).(FivetranConnectorDbtProjectOutput)
}

type FivetranConnectorDbtProjectMapOutput struct{ *pulumi.OutputState }

func (FivetranConnectorDbtProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FivetranConnectorDbtProject)(nil)).Elem()
}

func (o FivetranConnectorDbtProjectMapOutput) ToFivetranConnectorDbtProjectMapOutput() FivetranConnectorDbtProjectMapOutput {
	return o
}

func (o FivetranConnectorDbtProjectMapOutput) ToFivetranConnectorDbtProjectMapOutputWithContext(ctx context.Context) FivetranConnectorDbtProjectMapOutput {
	return o
}

func (o FivetranConnectorDbtProjectMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FivetranConnectorDbtProject] {
	return pulumix.Output[map[string]*FivetranConnectorDbtProject]{
		OutputState: o.OutputState,
	}
}

func (o FivetranConnectorDbtProjectMapOutput) MapIndex(k pulumi.StringInput) FivetranConnectorDbtProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FivetranConnectorDbtProject {
		return vs[0].(map[string]*FivetranConnectorDbtProject)[vs[1].(string)]
	}).(FivetranConnectorDbtProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorDbtProjectInput)(nil)).Elem(), &FivetranConnectorDbtProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorDbtProjectArrayInput)(nil)).Elem(), FivetranConnectorDbtProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FivetranConnectorDbtProjectMapInput)(nil)).Elem(), FivetranConnectorDbtProjectMap{})
	pulumi.RegisterOutputType(FivetranConnectorDbtProjectOutput{})
	pulumi.RegisterOutputType(FivetranConnectorDbtProjectArrayOutput{})
	pulumi.RegisterOutputType(FivetranConnectorDbtProjectMapOutput{})
}
